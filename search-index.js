antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1",[0,37.139,1,5.563]],["name/1",[2,2.243]],["text/1",[3,0.431,4,5.769,5,5.769,6,6.979,7,5.769,8,3.595,9,5.769,10,5.769,11,3.901,12,5.035,13,5.769,14,5.769,15,4.19,16,5.769]],["component/1",[1,0.201]],["title/2",[3,3.587]],["name/2",[17,2.243]],["text/2",[1,1.24,3,0.633,18,4.135,19,4.915,20,3.003,21,7.196,22,4.135,23,4.135,24,3.262,25,4.135,26,4.135]],["component/2",[1,0.201]],["title/3-1",[3,3.587]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3",[3,3.587]],["name/3",[27,1.958]],["text/3",[1,1.108,3,0.553,28,6.369,29,6.369]],["component/3",[1,0.201]],["title/4-1",[1,5.563,3,2.774]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["title/4-2",[1,5.563,3,2.774]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["title/4",[1,5.563,3,2.774]],["name/4",[1,0.201,30,1.344]],["text/4",[]],["component/4",[1,0.201]],["title/5-1",[3,3.587]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[1,4.535,3,2.262,31,21.99]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5-3",[3,2.774,32,26.973]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["title/5-4",[3,3.369,33,14.282]],["name/5-4",[]],["text/5-4",[]],["component/5-4",[]],["title/5-5",[3,3.369,33,14.282]],["name/5-5",[]],["text/5-5",[]],["component/5-5",[]],["title/5-6",[3,3.369,33,14.282]],["name/5-6",[]],["text/5-6",[]],["component/5-6",[]],["title/5-7",[3,2.774,34,21.088]],["name/5-7",[]],["text/5-7",[]],["component/5-7",[]],["title/5-8",[3,3.587]],["name/5-8",[]],["text/5-8",[]],["component/5-8",[]],["title/5-9",[3,2.774,35,32.412]],["name/5-9",[]],["text/5-9",[]],["component/5-9",[]],["title/5-10",[3,3.369,34,17.192]],["name/5-10",[]],["text/5-10",[]],["component/5-10",[]],["title/5-11",[3,3.587]],["name/5-11",[]],["text/5-11",[]],["component/5-11",[]],["title/5-12",[36,41.908]],["name/5-12",[]],["text/5-12",[]],["component/5-12",[]],["title/5-13",[37,41.908]],["name/5-13",[]],["text/5-13",[]],["component/5-13",[]],["title/5-14",[38,41.908]],["name/5-14",[]],["text/5-14",[]],["component/5-14",[]],["title/5-15",[39,41.908]],["name/5-15",[]],["text/5-15",[]],["component/5-15",[]],["title/5-16",[40,37.882]],["name/5-16",[]],["text/5-16",[]],["component/5-16",[]],["title/5",[1,5.563,3,2.774]],["name/5",[1,0.201,41,1.344]],["text/5",[1,0.233,3,0.634,20,1.13,27,0.744,31,0.886,32,0.619,33,1.783,34,3.005,35,0.391,36,3.552,37,0.391,38,0.391,39,0.391,40,2.086,42,0.448,43,1.22,44,0.963,45,1.469,46,0.853,47,0.303,48,2.399,49,0.511,50,0.448,51,0.853,52,0.448,53,0.448,54,0.448,55,2.448,56,0.448,57,0.448,58,3.158,59,0.673,60,1.052,61,1.94,62,0.853,63,3.724,64,0.448,65,0.353,66,1.94,67,0.448,68,1.45,69,1.052,70,2.211,71,1.789,72,0.391,73,0.325,74,0.886,75,0.325,76,0.448,77,0.448,78,0.448,79,0.619,80,0.448,81,0.448,82,0.448,83,0.448,84,2.234,85,0.448,86,0.353,87,0.448,88,1.557,89,0.448,90,0.391,91,1.626,92,2.374,93,0.391,94,0.325,95,0.448,96,0.353,97,0.448,98,0.448,99,0.448,100,0.448,101,0.391,102,0.448,103,0.448,104,0.448,105,0.448,106,0.448,107,0.448,108,0.448,109,0.448,110,0.744,111,0.673,112,0.448,113,0.853,114,0.448,115,0.448,116,0.853,117,2.928,118,1.555,119,0.448,120,0.448,121,0.353,122,0.448,123,0.448,124,0.448,125,0.448,126,2.928,127,2.086,128,0.448,129,2.404,130,0.448,131,1.555,132,0.448,133,0.448,134,1.555,135,0.448,136,0.853,137,0.853,138,0.853,139,0.853,140,1.789,141,0.448,142,0.448,143,2.083,144,0.353,145,0.448,146,0.448,147,0.448,148,0.448,149,0.353,150,0.448,151,0.448,152,1.22,153,0.448,154,0.448,155,0.448,156,0.448,157,0.448,158,0.448,159,0.853,160,0.448,161,0.448,162,0.448,163,0.448,164,0.448,165,0.448,166,2.098,167,2.404,168,0.448,169,0.448,170,0.448,171,0.448,172,0.448,173,0.448,174,0.448,175,0.448,176,0.448,177,0.448,178,0.448,179,0.448,180,1.22,181,0.448,182,0.448,183,0.448,184,0.448,185,1.22,186,0.448,187,0.448,188,0.448,189,1.259,190,0.353,191,0.448,192,0.448,193,0.448,194,0.448,195,0.853,196,0.448,197,0.448,198,0.448,199,0.448,200,0.448,201,0.448,202,0.448,203,1.469,204,1.22,205,1.227,206,0.448,207,0.448,208,0.448,209,0.448,210,0.448,211,0.448,212,0.448,213,0.448,214,0.448,215,0.448,216,0.853,217,1.555,218,1.13,219,0.853,220,0.853,221,1.065,222,0.448,223,0.448,224,0.853,225,0.448,226,0.448,227,0.448,228,0.448,229,0.448,230,0.448,231,0.391,232,0.673,233,0.448,234,1.227,235,0.448,236,0.448,237,0.448,238,0.853,239,0.673,240,0.353,241,0.325,242,0.353,243,0.448,244,1.555,245,0.448,246,1.22,247,0.448,248,1.22,249,0.448,250,0.448,251,1.22,252,0.448,253,0.448,254,0.853,255,0.448,256,0.853,257,0.448,258,0.448,259,0.448,260,0.448,261,0.448,262,0.448,263,2.645,264,0.448,265,1.555,266,0.448,267,0.448,268,0.448,269,0.448,270,0.353,271,1.22,272,0.448,273,0.853,274,0.853,275,0.448,276,0.448,277,0.448,278,0.448,279,0.448,280,0.448,281,1.862,282,0.853,283,0.448,284,0.448,285,0.448,286,0.448,287,0.448,288,0.448,289,0.448,290,0.448,291,0.448,292,0.448,293,1.22,294,0.448,295,0.448,296,0.448,297,0.853,298,0.853,299,0.448,300,0.853,301,0.448,302,1.357,303,0.448,304,0.448,305,0.448,306,0.853,307,0.448,308,0.744,309,0.448,310,0.853,311,0.448,312,1.555,313,0.448,314,0.448,315,0.853,316,0.448,317,0.853,318,0.448,319,0.853,320,0.448,321,0.448,322,1.22,323,1.22,324,0.448,325,0.448,326,0.448,327,0.448,328,0.448,329,0.448,330,0.673,331,0.448,332,0.853,333,0.448,334,0.448,335,0.448,336,0.448,337,0.448,338,1.22,339,0.448,340,0.448,341,0.448,342,0.448,343,0.448,344,0.448,345,0.448,346,0.448,347,0.448,348,0.853,349,0.448,350,0.448,351,0.448,352,0.448,353,0.448,354,0.448,355,0.448,356,0.448,357,0.448,358,1.22,359,0.448,360,1.22,361,0.448,362,0.448,363,0.448,364,0.577,365,0.853,366,0.448,367,0.325,368,0.448,369,0.448,370,0.353,371,0.448,372,0.448,373,0.448,374,0.325,375,0.325,376,0.391,377,0.448,378,0.448,379,0.448,380,0.325,381,1.357,382,2.308,383,0.448,384,0.853,385,0.448,386,0.448,387,0.448,388,0.448,389,0.391,390,0.448,391,0.448,392,0.448,393,0.744,394,0.448,395,0.448,396,0.448,397,0.391,398,0.391,399,0.448,400,0.448,401,0.448]],["component/5",[1,0.201]],["title/6-1",[3,3.587]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[1,7.193]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[1,3.828,8,13.166,11,17.283,12,22.304]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[3,3.587]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6-5",[3,3.587]],["name/6-5",[]],["text/6-5",[]],["component/6-5",[]],["title/6-6",[3,3.587]],["name/6-6",[]],["text/6-6",[]],["component/6-6",[]],["title/6-7",[3,3.369,402,26.425]],["name/6-7",[]],["text/6-7",[]],["component/6-7",[]],["title/6-8",[3,3.369,403,26.425]],["name/6-8",[]],["text/6-8",[]],["component/6-8",[]],["title/6-9",[404,48.02]],["name/6-9",[]],["text/6-9",[]],["component/6-9",[]],["title/6",[1,5.563,3,2.774]],["name/6",[1,0.201,405,0.976]],["text/6",[3,0.63,24,3.832,33,0.819,34,0.985,48,1.101,49,1.039,55,3.952,58,1.174,60,1.962,61,1.174,63,1.174,66,2.953,68,1.174,69,1.962,70,2.527,71,2.953,79,3.171,84,1.26,90,1.514,91,1.174,92,2.714,93,1.514,94,1.26,101,1.514,110,1.514,111,1.369,126,2.527,140,2.527,143,2.714,189,1.174,241,2.714,364,2.527,367,1.26,380,2.714,389,3.261,402,4.239,403,2.531,405,2.107,406,1.369,407,1.369,408,1.369,409,1.369,410,1.369,411,1.369,412,1.369,413,1.369,414,1.735,415,1.735,416,4.143,417,1.735,418,1.735,419,1.369,420,3.811,421,1.735,422,1.735,423,1.735,424,1.735,425,1.514,426,1.735,427,1.514,428,1.735,429,1.735,430,1.514,431,1.735,432,1.735,433,1.735,434,1.26,435,1.514,436,1.735,437,1.735,438,1.735,439,2.901,440,2.901,441,2.531,442,2.107,443,2.901,444,2.901,445,2.901,446,1.735,447,2.288,448,2.288,449,1.369,450,2.901,451,1.514,452,1.735,453,3.811,454,3.811,455,3.737,456,3.737,457,3.737,458,2.901,459,2.901,460,1.735,461,1.735,462,1.735,463,1.735,464,3.261]],["component/6",[1,0.201]],["title/7-1",[3,3.587]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[47,32.474]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7-3",[465,41.908]],["name/7-3",[]],["text/7-3",[]],["component/7-3",[]],["title/7-4",[3,1.909,240,20.162,241,18.561,242,20.162]],["name/7-4",[]],["text/7-4",[]],["component/7-4",[]],["title/7-5",[3,2.774,239,29.299]],["name/7-5",[]],["text/7-5",[]],["component/7-5",[]],["title/7-6",[419,37.882]],["name/7-6",[]],["text/7-6",[]],["component/7-6",[]],["title/7-7",[3,2.774,34,21.088]],["name/7-7",[]],["text/7-7",[]],["component/7-7",[]],["title/7-8",[3,3.587]],["name/7-8",[]],["text/7-8",[]],["component/7-8",[]],["title/7-9",[3,3.587]],["name/7-9",[]],["text/7-9",[]],["component/7-9",[]],["title/7-10",[427,41.908]],["name/7-10",[]],["text/7-10",[]],["component/7-10",[]],["title/7-11",[434,34.875]],["name/7-11",[]],["text/7-11",[]],["component/7-11",[]],["title/7-12",[3,2.774,434,26.973]],["name/7-12",[]],["text/7-12",[]],["component/7-12",[]],["title/7-13",[3,2.774,34,21.088]],["name/7-13",[]],["text/7-13",[]],["component/7-13",[]],["title/7-14",[430,41.908]],["name/7-14",[]],["text/7-14",[]],["component/7-14",[]],["title/7",[1,5.563,3,2.774]],["name/7",[1,0.201,34,0.763]],["text/7",[3,0.63,19,1.279,24,4.133,33,0.488,34,1.59,40,4.47,47,0.991,48,0.93,55,2.765,58,0.991,61,2.232,63,2.978,66,3.476,68,1.7,69,0.991,70,2.381,71,3.249,72,1.279,73,1.825,74,2.397,75,1.064,88,0.399,91,0.991,111,1.983,117,2.765,126,1.7,140,0.699,166,0.479,189,0.699,218,3.805,221,2.443,231,2.443,239,0.433,240,0.433,241,0.751,242,0.433,302,1.279,308,0.479,364,0.699,374,0.399,375,0.751,376,2.88,381,0.479,382,1.616,393,0.479,397,0.479,398,2.671,419,0.816,420,0.902,425,0.902,434,2.397,435,0.479,441,1.919,442,0.751,453,3.25,454,3.073,464,0.479,465,0.902,466,0.433,467,1.034,468,1.034,469,0.549,470,1.034,471,0.816,472,0.549,473,0.549,474,0.549,475,0.433,476,0.549,477,0.549,478,0.549,479,0.549,480,0.549,481,0.549,482,0.549,483,0.549,484,0.549,485,0.549,486,0.549,487,0.549,488,0.549,489,0.549,490,0.549,491,0.549,492,0.549,493,0.549,494,0.549,495,0.549,496,0.549,497,0.549,498,0.549,499,0.549,500,1.034,501,0.549,502,1.465,503,0.549,504,1.465,505,0.549,506,0.549,507,0.549,508,4.403,509,1.034,510,0.549,511,3.061,512,0.549,513,1.851,514,0.549,515,3.061,516,0.549,517,0.549,518,0.549,519,5.589,520,1.034,521,0.549,522,0.549,523,0.549,524,0.549,525,1.46,526,0.549,527,0.549,528,0.549,529,0.549,530,0.549,531,0.549,532,0.549,533,0.549,534,0.549,535,0.549,536,0.549,537,1.034,538,0.549,539,0.549,540,0.549,541,0.549,542,0.549,543,0.549,544,0.549,545,0.549,546,0.549,547,5.139,548,0.549,549,3.913,550,1.465,551,0.549,552,1.465,553,1.465,554,0.549,555,0.549,556,5.876,557,1.156,558,0.549,559,0.549,560,0.549,561,0.549,562,0.549,563,0.549,564,0.549,565,0.549,566,0.549,567,0.549,568,1.034,569,0.549,570,0.549,571,0.549,572,0.549,573,0.549,574,1.851,575,0.549,576,0.549,577,0.549,578,1.034,579,1.034,580,1.034,581,1.735,582,0.549,583,1.465,584,0.549,585,0.549,586,1.034,587,0.549,588,1.034,589,0.549,590,0.433,591,0.549,592,1.156,593,0.549,594,0.549,595,1.034,596,0.549,597,1.034,598,0.549,599,0.549,600,0.549,601,0.549,602,0.549,603,0.549,604,1.851,605,0.549,606,1.034,607,0.549,608,0.549,609,0.549,610,1.465,611,0.549,612,0.549,613,0.549,614,0.549,615,0.549,616,0.549,617,0.549,618,0.549,619,1.034,620,0.549,621,0.549,622,0.549,623,1.465,624,0.549,625,0.549,626,0.549,627,0.549,628,1.034,629,0.549,630,0.549,631,0.549,632,0.549,633,0.549,634,0.549,635,0.816,636,0.549,637,0.549,638,0.549,639,0.549,640,1.034,641,0.549,642,0.549,643,1.465,644,0.549,645,0.549,646,0.549,647,0.549,648,0.549,649,0.549,650,0.549,651,0.549,652,0.549,653,0.549,654,0.549]],["component/7",[1,0.201]],["title/8",[1,5.563,3,2.774]],["name/8",[1,0.201,655,1.344]],["text/8",[]],["component/8",[1,0.201]],["title/9-1",[1,5.563,15,26.973]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9",[1,5.563,15,26.973]],["name/9",[1,0.201,15,0.976]],["text/9",[]],["component/9",[1,0.201]],["title/10-1",[3,3.587]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[3,3.587]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[3,2.774,33,17.519]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10-4",[3,3.369,33,14.282]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["title/10-5",[3,2.774,656,26.973]],["name/10-5",[]],["text/10-5",[]],["component/10-5",[]],["title/10-6",[657,34.875]],["name/10-6",[]],["text/10-6",[]],["component/10-6",[]],["title/10-7",[658,34.875]],["name/10-7",[]],["text/10-7",[]],["component/10-7",[]],["title/10-8",[659,34.875]],["name/10-8",[]],["text/10-8",[]],["component/10-8",[]],["title/10-9",[660,34.875]],["name/10-9",[]],["text/10-9",[]],["component/10-9",[]],["title/10-10",[3,3.587]],["name/10-10",[]],["text/10-10",[]],["component/10-10",[]],["title/10-11",[3,2.774,49,22.246]],["name/10-11",[]],["text/10-11",[]],["component/10-11",[]],["title/10",[1,3.828,3,2.961,661,25.557]],["name/10",[1,0.112,8,0.384,11,0.504,662,0.651]],["text/10",[1,0.373,3,0.637,8,0.458,11,0.317,20,0.34,31,0.34,32,0.646,33,1.675,44,1.276,45,0.702,47,0.859,48,2.253,49,2.727,55,2.401,58,1.307,59,0.702,60,1.503,61,0.859,63,2.625,65,0.37,66,1.848,68,0.859,69,1.503,70,1.093,71,1.682,73,0.646,74,0.923,75,0.646,79,0.646,84,1.174,86,1.003,88,1.985,91,0.317,92,1.404,94,0.34,96,0.702,117,3.228,121,0.37,126,2.727,127,1.276,140,0.859,143,1.404,144,0.702,149,1.276,189,1.307,190,0.702,203,0.702,205,0.702,218,0.34,232,0.702,234,0.37,270,0.37,330,0.37,364,0.859,367,0.646,370,0.37,374,0.34,375,0.646,380,0.923,405,0.646,406,0.37,407,0.702,408,0.37,409,0.37,410,0.37,411,2.502,412,1.276,413,0.37,416,0.37,442,0.34,447,0.702,448,0.702,449,0.702,466,0.37,471,0.37,475,0.702,525,0.37,557,0.37,581,0.37,590,0.37,592,0.37,635,0.702,656,1.985,657,2.303,658,0.34,659,0.34,660,1.174,663,0.409,664,1.963,665,1.109,666,2.502,667,0.777,668,0.409,669,0.409,670,0.409,671,0.409,672,0.409,673,0.409,674,0.777,675,1.411,676,1.109,677,0.777,678,0.409,679,0.409,680,0.409,681,0.702,682,0.409,683,0.409,684,0.409,685,0.702,686,0.409,687,0.409,688,0.409,689,0.409,690,0.409,691,0.409,692,0.409,693,0.409,694,0.777,695,0.409,696,0.409,697,0.409,698,0.37,699,0.777,700,0.409,701,0.409,702,0.37,703,0.777,704,0.409,705,0.409,706,0.702,707,0.409,708,0.409,709,0.409,710,0.777,711,0.409,712,0.409,713,0.409,714,0.702,715,0.409,716,0.777,717,0.409,718,1.003,719,0.409,720,0.409,721,0.37,722,0.409,723,0.409,724,0.409,725,0.409,726,0.409,727,0.409,728,0.409,729,0.409,730,0.409,731,0.409,732,0.409,733,0.409,734,0.409,735,0.409,736,0.409,737,0.409,738,0.409,739,0.409,740,0.409,741,0.409,742,0.409,743,0.409,744,0.409,745,0.409,746,0.409,747,0.409,748,0.409,749,0.409,750,0.409,751,2.156,752,2.171,753,0.409,754,0.409,755,0.409,756,0.409,757,0.409,758,0.409,759,0.409,760,0.409,761,1.411,762,1.109,763,0.409,764,0.409,765,0.409,766,0.409,767,0.409,768,1.109,769,0.409,770,0.777,771,0.777,772,0.409,773,1.109,774,0.409,775,0.409,776,0.409,777,0.409,778,0.409,779,0.409,780,0.409,781,1.109,782,0.409,783,0.409,784,0.777,785,0.777,786,0.409,787,0.409,788,0.409,789,0.409,790,0.409,791,0.409,792,0.409,793,0.409,794,0.409,795,0.409,796,0.409,797,0.409,798,0.409,799,0.409,800,2.385,801,0.409,802,0.409,803,1.411,804,0.777,805,0.409,806,1.687,807,0.409,808,0.777,809,1.109,810,0.777,811,0.409,812,1.687,813,0.409,814,0.409,815,0.409,816,0.409,817,0.409,818,0.409,819,0.409,820,0.409,821,0.409,822,0.409,823,0.409,824,0.409,825,0.409,826,0.702,827,1.109,828,0.409,829,0.409,830,0.409,831,0.409,832,0.409,833,0.409,834,0.409,835,0.409,836,0.409,837,0.409,838,0.409,839,0.409,840,0.409,841,0.409,842,0.409,843,0.409,844,0.409,845,0.409,846,0.777,847,0.409,848,0.409,849,0.409,850,0.409,851,0.409,852,1.411,853,0.777,854,1.687,855,0.777,856,0.777,857,0.409,858,0.409,859,0.777,860,0.409,861,1.109,862,0.409,863,0.409,864,0.409,865,0.409,866,0.409,867,0.409,868,0.409,869,0.409,870,0.409,871,0.409,872,0.409,873,0.409,874,1.687,875,0.777,876,0.777,877,0.409,878,0.409,879,0.409,880,0.409,881,0.409,882,0.409,883,0.409,884,0.409,885,0.409,886,0.409,887,0.409,888,0.409,889,0.409,890,0.409,891,0.409,892,0.409,893,0.409,894,0.409,895,0.409,896,0.409,897,0.409,898,0.409,899,0.409,900,0.409,901,0.409,902,0.409,903,0.409,904,0.409,905,1.109,906,0.409,907,0.409,908,0.409,909,0.777,910,0.777,911,0.777,912,0.409,913,0.409,914,0.777,915,0.409,916,0.409,917,0.777,918,0.777,919,0.409,920,1.939,921,0.409,922,0.409,923,0.409,924,0.409,925,0.409,926,0.409,927,0.409,928,0.409]],["component/10",[1,0.201]],["title/11-1",[664,37.882]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11",[1,4.535,3,2.262,8,15.598]],["name/11",[1,0.144,8,0.494,48,0.609]],["text/11",[1,0.7,3,0.62,8,3.147,49,3.659,60,3.158,117,3.158,451,4.076,666,4.819,681,3.684,685,3.684,698,3.684,702,3.684,706,4.819,714,3.684,718,4.819,721,3.684,751,3.684,826,3.684,929,4.67,930,4.67,931,4.67,932,4.67,933,4.67]],["component/11",[1,0.201]],["title/12-1",[3,3.587]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12-2",[3,3.587]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["title/12-3",[3,2.774,33,17.519]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["title/12-4",[3,3.369,33,14.282]],["name/12-4",[]],["text/12-4",[]],["component/12-4",[]],["title/12-5",[3,2.774,656,26.973]],["name/12-5",[]],["text/12-5",[]],["component/12-5",[]],["title/12-6",[657,34.875]],["name/12-6",[]],["text/12-6",[]],["component/12-6",[]],["title/12-7",[658,34.875]],["name/12-7",[]],["text/12-7",[]],["component/12-7",[]],["title/12-8",[659,34.875]],["name/12-8",[]],["text/12-8",[]],["component/12-8",[]],["title/12-9",[660,34.875]],["name/12-9",[]],["text/12-9",[]],["component/12-9",[]],["title/12-10",[3,3.587]],["name/12-10",[]],["text/12-10",[]],["component/12-10",[]],["title/12-11",[3,2.774,49,22.246]],["name/12-11",[]],["text/12-11",[]],["component/12-11",[]],["title/12",[1,3.828,3,2.961,8,13.166]],["name/12",[1,0.144,8,0.494,662,0.837]],["text/12",[1,0.373,3,0.637,8,0.458,11,0.317,20,0.34,31,0.34,32,0.646,33,1.675,44,1.276,45,0.702,47,0.859,48,2.253,49,2.727,55,2.401,58,1.307,59,0.702,60,1.503,61,0.859,63,2.625,65,0.37,66,1.848,68,0.859,69,1.503,70,1.093,71,1.682,73,0.646,74,0.923,75,0.646,79,0.646,84,1.174,86,1.003,88,1.985,91,0.317,92,1.404,94,0.34,96,0.702,117,3.228,121,0.37,126,2.727,127,1.276,140,0.859,143,1.404,144,0.702,149,1.276,189,1.307,190,0.702,203,0.702,205,0.702,218,0.34,232,0.702,234,0.37,270,0.37,330,0.37,364,0.859,367,0.646,370,0.37,374,0.34,375,0.646,380,0.923,405,0.646,406,0.37,407,0.702,408,0.37,409,0.37,410,0.37,411,2.502,412,1.276,413,0.37,416,0.37,442,0.34,447,0.702,448,0.702,449,0.702,466,0.37,471,0.37,475,0.702,525,0.37,557,0.37,581,0.37,590,0.37,592,0.37,635,0.702,656,1.985,657,2.303,658,0.34,659,0.34,660,1.174,663,0.409,664,1.963,665,1.109,666,2.502,667,0.777,668,0.409,669,0.409,670,0.409,671,0.409,672,0.409,673,0.409,674,0.777,675,1.411,676,1.109,677,0.777,678,0.409,679,0.409,680,0.409,681,0.702,682,0.409,683,0.409,684,0.409,685,0.702,686,0.409,687,0.409,688,0.409,689,0.409,690,0.409,691,0.409,692,0.409,693,0.409,694,0.777,695,0.409,696,0.409,697,0.409,698,0.37,699,0.777,700,0.409,701,0.409,702,0.37,703,0.777,704,0.409,705,0.409,706,0.702,707,0.409,708,0.409,709,0.409,710,0.777,711,0.409,712,0.409,713,0.409,714,0.702,715,0.409,716,0.777,717,0.409,718,1.003,719,0.409,720,0.409,721,0.37,722,0.409,723,0.409,724,0.409,725,0.409,726,0.409,727,0.409,728,0.409,729,0.409,730,0.409,731,0.409,732,0.409,733,0.409,734,0.409,735,0.409,736,0.409,737,0.409,738,0.409,739,0.409,740,0.409,741,0.409,742,0.409,743,0.409,744,0.409,745,0.409,746,0.409,747,0.409,748,0.409,749,0.409,750,0.409,751,2.156,752,2.171,753,0.409,754,0.409,755,0.409,756,0.409,757,0.409,758,0.409,759,0.409,760,0.409,761,1.411,762,1.109,763,0.409,764,0.409,765,0.409,766,0.409,767,0.409,768,1.109,769,0.409,770,0.777,771,0.777,772,0.409,773,1.109,774,0.409,775,0.409,776,0.409,777,0.409,778,0.409,779,0.409,780,0.409,781,1.109,782,0.409,783,0.409,784,0.777,785,0.777,786,0.409,787,0.409,788,0.409,789,0.409,790,0.409,791,0.409,792,0.409,793,0.409,794,0.409,795,0.409,796,0.409,797,0.409,798,0.409,799,0.409,800,2.385,801,0.409,802,0.409,803,1.411,804,0.777,805,0.409,806,1.687,807,0.409,808,0.777,809,1.109,810,0.777,811,0.409,812,1.687,813,0.409,814,0.409,815,0.409,816,0.409,817,0.409,818,0.409,819,0.409,820,0.409,821,0.409,822,0.409,823,0.409,824,0.409,825,0.409,826,0.702,827,1.109,828,0.409,829,0.409,830,0.409,831,0.409,832,0.409,833,0.409,834,0.409,835,0.409,836,0.409,837,0.409,838,0.409,839,0.409,840,0.409,841,0.409,842,0.409,843,0.409,844,0.409,845,0.409,846,0.777,847,0.409,848,0.409,849,0.409,850,0.409,851,0.409,852,1.411,853,0.777,854,1.687,855,0.777,856,0.777,857,0.409,858,0.409,859,0.777,860,0.409,861,1.109,862,0.409,863,0.409,864,0.409,865,0.409,866,0.409,867,0.409,868,0.409,869,0.409,870,0.409,871,0.409,872,0.409,873,0.409,874,1.687,875,0.777,876,0.777,877,0.409,878,0.409,879,0.409,880,0.409,881,0.409,882,0.409,883,0.409,884,0.409,885,0.409,886,0.409,887,0.409,888,0.409,889,0.409,890,0.409,891,0.409,892,0.409,893,0.409,894,0.409,895,0.409,896,0.409,897,0.409,898,0.409,899,0.409,900,0.409,901,0.409,902,0.409,903,0.409,904,0.409,905,1.109,906,0.409,907,0.409,908,0.409,909,0.777,910,0.777,911,0.777,912,0.409,913,0.409,914,0.777,915,0.409,916,0.409,917,0.777,918,0.777,919,0.409,920,1.939,921,0.409,922,0.409,923,0.409,924,0.409,925,0.409,926,0.409,927,0.409,928,0.409]],["component/12",[1,0.201]],["title/13-1",[934,41.908]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13",[934,41.908]],["name/13",[935,1.344,936,1.344]],["text/13",[]],["component/13",[1,0.201]],["title/14-1",[937,41.908]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14",[937,41.908]],["name/14",[938,2.243]],["text/14",[]],["component/14",[1,0.201]]],"invertedIndex":[["",{"_index":3,"title":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"3-1":{},"4-1":{},"4-2":{},"5-1":{},"5-2":{},"5-3":{},"5-4":{},"5-5":{},"5-6":{},"5-7":{},"5-8":{},"5-9":{},"5-10":{},"5-11":{},"6-1":{},"6-4":{},"6-5":{},"6-6":{},"6-7":{},"6-8":{},"7-1":{},"7-4":{},"7-5":{},"7-7":{},"7-8":{},"7-9":{},"7-12":{},"7-13":{},"10-1":{},"10-2":{},"10-3":{},"10-4":{},"10-5":{},"10-10":{},"10-11":{},"12-1":{},"12-2":{},"12-3":{},"12-4":{},"12-5":{},"12-10":{},"12-11":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["0",{"_index":375,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"12":{}},"component":{}}],["1",{"_index":126,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["2",{"_index":140,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["2.0.6",{"_index":9,"title":{},"name":{},"text":{"1":{}},"component":{}}],["2.1.5",{"_index":13,"title":{},"name":{},"text":{"1":{}},"component":{}}],["3",{"_index":364,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["3.5.1",{"_index":16,"title":{},"name":{},"text":{"1":{}},"component":{}}],["3.5.9",{"_index":7,"title":{},"name":{},"text":{"1":{}},"component":{}}],["30",{"_index":593,"title":{},"name":{},"text":{"7":{}},"component":{}}],["482",{"_index":616,"title":{},"name":{},"text":{"7":{}},"component":{}}],["59",{"_index":789,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["601",{"_index":612,"title":{},"name":{},"text":{"7":{}},"component":{}}],["abstractbeandefinit",{"_index":768,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["abstractbeandefinition.scope_default.equals(defaultscop",{"_index":720,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["actual",{"_index":787,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["add(\"sqlsessionfactori",{"_index":804,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["add(\"sqlsessiontempl",{"_index":810,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["additionalparamet",{"_index":400,"title":{},"name":{},"text":{"5":{}},"component":{}}],["addmapper(class",{"_index":195,"title":{},"name":{},"text":{"5":{}},"component":{}}],["afterpropertiesset",{"_index":846,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["alia",{"_index":882,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["alreadi",{"_index":201,"title":{},"name":{},"text":{"5":{}},"component":{}}],["annoattrs.getclass(\"annotationclass",{"_index":682,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["annoattrs.getclass(\"factorybean",{"_index":695,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["annoattrs.getclass(\"markerinterfac",{"_index":686,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["annoattrs.getclass(\"namegener",{"_index":690,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["annoattrs.getstring(\"defaultscop",{"_index":719,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["annoattrs.getstring(\"lazyiniti",{"_index":715,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["annoattrs.getstring(\"sqlsessionfactoryref",{"_index":703,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["annoattrs.getstring(\"sqlsessiontemplateref",{"_index":699,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["annot",{"_index":679,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["annotation.class.equals(annotationclass",{"_index":683,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["annotationattribut",{"_index":676,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["annotationclass",{"_index":681,"title":{},"name":{},"text":{"10":{},"11":{},"12":{}},"component":{}}],["arg",{"_index":454,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["arraylist",{"_index":370,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["arrays.stream(annoattrs.getstringarray(\"value\")).filter(stringutils::hastext).collect(collectors.tolist",{"_index":708,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["arrays.tostring(basepackag",{"_index":763,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["attempt",{"_index":540,"title":{},"name":{},"text":{"7":{}},"component":{}}],["attribut",{"_index":795,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["autowir",{"_index":814,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["baseexecutor",{"_index":578,"title":{},"name":{},"text":{"7":{}},"component":{}}],["basepackag",{"_index":706,"title":{},"name":{},"text":{"10":{},"11":{},"12":{}},"component":{}}],["basepackageclass",{"_index":929,"title":{},"name":{},"text":{"11":{}},"component":{}}],["basepackages.add(getdefaultbasepackage(annometa",{"_index":713,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["basepackages.addal",{"_index":707,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["basepackages.addall(arrays.stream(annoattrs.getclassarray(\"basepackageclasses\")).map(classutils::getpackagenam",{"_index":711,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["basepackages.addall(arrays.stream(annoattrs.getstringarray(\"basepackages\")).filter(stringutils::hastext",{"_index":709,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["basepackages.isempti",{"_index":712,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["batch",{"_index":437,"title":{},"name":{},"text":{"6":{}},"component":{}}],["bean",{"_index":751,"title":{},"name":{},"text":{"10":{},"11":{},"12":{}},"component":{}}],["beanclass",{"_index":790,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["beanclassnam",{"_index":781,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["beandefinit",{"_index":656,"title":{"10-5":{},"12-5":{}},"name":{},"text":{"10":{},"12":{}},"component":{}}],["beandefinitionhold",{"_index":770,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["beandefinitionregistri",{"_index":674,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["beandefinitionregistrypostprocessor",{"_index":728,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["beandefinitions.isempti",{"_index":760,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["beannam",{"_index":724,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["beannamegenerator.class.equals(generatorclass",{"_index":691,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["beanutils.instantiateclass(generatorclass",{"_index":693,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["befor",{"_index":258,"title":{},"name":{},"text":{"5":{}},"component":{}}],["bindhandl",{"_index":355,"title":{},"name":{},"text":{"5":{}},"component":{}}],["bindingexception(\"mapp",{"_index":539,"title":{},"name":{},"text":{"7":{}},"component":{}}],["bindingexception(\"typ",{"_index":200,"title":{},"name":{},"text":{"5":{}},"component":{}}],["bindingexception(\"unknown",{"_index":536,"title":{},"name":{},"text":{"7":{}},"component":{}}],["bindmapperfornamespac",{"_index":159,"title":{},"name":{},"text":{"5":{}},"component":{}}],["blog",{"_index":28,"title":{},"name":{},"text":{"3":{}},"component":{}}],["boolean",{"_index":203,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["boot",{"_index":11,"title":{"6-3":{}},"name":{"10":{}},"text":{"1":{},"10":{},"12":{}},"component":{}}],["both",{"_index":808,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["bound",{"_index":188,"title":{},"name":{},"text":{"5":{}},"component":{}}],["boundsql",{"_index":40,"title":{"5-16":{}},"name":{},"text":{"5":{},"7":{}},"component":{}}],["boundsql(configur",{"_index":397,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["boundsql.class",{"_index":461,"title":{},"name":{},"text":{"6":{}},"component":{}}],["boundsql.getparametermap",{"_index":586,"title":{},"name":{},"text":{"7":{}},"component":{}}],["boundsql.getsql",{"_index":588,"title":{},"name":{},"text":{"7":{}},"component":{}}],["boundtyp",{"_index":185,"title":{},"name":{},"text":{"5":{}},"component":{}}],["break",{"_index":515,"title":{},"name":{},"text":{"7":{}},"component":{}}],["build",{"_index":51,"title":{},"name":{},"text":{"5":{}},"component":{}}],["build(configur",{"_index":926,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["build(parser.pars",{"_index":67,"title":{},"name":{},"text":{"5":{}},"component":{}}],["build(read",{"_index":56,"title":{},"name":{},"text":{"5":{}},"component":{}}],["builder",{"_index":331,"title":{},"name":{},"text":{"5":{}},"component":{}}],["builder.addpropertyvalue(\"annotationclass",{"_index":684,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["builder.addpropertyvalue(\"basepackag",{"_index":722,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["builder.addpropertyvalue(\"defaultscop",{"_index":721,"title":{},"name":{},"text":{"10":{},"11":{},"12":{}},"component":{}}],["builder.addpropertyvalue(\"lazyiniti",{"_index":717,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["builder.addpropertyvalue(\"mapperfactorybeanclass",{"_index":697,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["builder.addpropertyvalue(\"markerinterfac",{"_index":688,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["builder.addpropertyvalue(\"namegener",{"_index":692,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["builder.addpropertyvalue(\"sqlsessionfactorybeannam",{"_index":705,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["builder.addpropertyvalue(\"sqlsessiontemplatebeannam",{"_index":701,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["builder.getbeandefinit",{"_index":727,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["builder.parsescriptnod",{"_index":333,"title":{},"name":{},"text":{"5":{}},"component":{}}],["builderassist",{"_index":224,"title":{},"name":{},"text":{"5":{}},"component":{}}],["builderassistant.addmappedstatement(id",{"_index":321,"title":{},"name":{},"text":{"5":{}},"component":{}}],["builderassistant.applycurrentnamespace(keystatementid",{"_index":284,"title":{},"name":{},"text":{"5":{}},"component":{}}],["builderassistant.getcurrentnamespac",{"_index":184,"title":{},"name":{},"text":{"5":{}},"component":{}}],["builderassistant.setcurrentnamespace(namespac",{"_index":172,"title":{},"name":{},"text":{"5":{}},"component":{}}],["builderexception(\"a",{"_index":147,"title":{},"name":{},"text":{"5":{}},"component":{}}],["builderexception(\"each",{"_index":85,"title":{},"name":{},"text":{"5":{}},"component":{}}],["builderexception(\"error",{"_index":110,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["builderexception(\"mapper'",{"_index":170,"title":{},"name":{},"text":{"5":{}},"component":{}}],["buildsqlsessionfactori",{"_index":407,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["buildstatementfromcontext",{"_index":215,"title":{},"name":{},"text":{"5":{}},"component":{}}],["buildstatementfromcontext(context.evalnodes(\"select|insert|update|delet",{"_index":181,"title":{},"name":{},"text":{"5":{}},"component":{}}],["buildstatementfromcontext(list",{"_index":217,"title":{},"name":{},"text":{"5":{}},"component":{}}],["cachedinvoker(method",{"_index":479,"title":{},"name":{},"text":{"7":{}},"component":{}}],["cachedinvoker(method).invoke(proxi",{"_index":474,"title":{},"name":{},"text":{"7":{}},"component":{}}],["cacheelement(context.evalnode(\"cach",{"_index":174,"title":{},"name":{},"text":{"5":{}},"component":{}}],["cachekey",{"_index":583,"title":{},"name":{},"text":{"7":{}},"component":{}}],["cachekey.class",{"_index":460,"title":{},"name":{},"text":{"6":{}},"component":{}}],["cacherefelement(context.evalnode(\"cach",{"_index":173,"title":{},"name":{},"text":{"5":{}},"component":{}}],["callabl",{"_index":646,"title":{},"name":{},"text":{"7":{}},"component":{}}],["callablestat",{"_index":650,"title":{},"name":{},"text":{"7":{}},"component":{}}],["callablestatementhandler(executor",{"_index":647,"title":{},"name":{},"text":{"7":{}},"component":{}}],["case",{"_index":511,"title":{},"name":{},"text":{"7":{}},"component":{}}],["catch",{"_index":68,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["caus",{"_index":111,"title":{},"name":{},"text":{"5":{},"6":{},"7":{}},"component":{}}],["cc.implicated.demo.mybatisdemoapplication#mapperscannerregistrar#0",{"_index":725,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["check",{"_index":590,"title":{},"name":{},"text":{"7":{},"10":{},"12":{}},"component":{}}],["child",{"_index":119,"title":{},"name":{},"text":{"5":{}},"component":{}}],["child.getstringattribute(\"class",{"_index":132,"title":{},"name":{},"text":{"5":{}},"component":{}}],["child.getstringattribute(\"nam",{"_index":124,"title":{},"name":{},"text":{"5":{}},"component":{}}],["child.getstringattribute(\"resourc",{"_index":128,"title":{},"name":{},"text":{"5":{}},"component":{}}],["child.getstringattribute(\"url",{"_index":130,"title":{},"name":{},"text":{"5":{}},"component":{}}],["children",{"_index":372,"title":{},"name":{},"text":{"5":{}},"component":{}}],["choosehandl",{"_index":350,"title":{},"name":{},"text":{"5":{}},"component":{}}],["class",{"_index":143,"title":{},"name":{},"text":{"5":{},"6":{},"10":{},"12":{}},"component":{}}],["class.class.equals(markerinterfac",{"_index":687,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["classnotfoundexcept",{"_index":187,"title":{},"name":{},"text":{"5":{}},"component":{}}],["classpathmapperscann",{"_index":734,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["classpathmapperscanner(registri",{"_index":736,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["clazz.isanonymousclass",{"_index":875,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["clazz.isinterfac",{"_index":876,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["clazz.ismemberclass",{"_index":877,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["clearlocalcach",{"_index":606,"title":{},"name":{},"text":{"7":{}},"component":{}}],["close",{"_index":425,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["closestatement(stmt",{"_index":634,"title":{},"name":{},"text":{"7":{}},"component":{}}],["collect(collectors.tolist",{"_index":710,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["com.baomidou:mybati",{"_index":14,"title":{},"name":{},"text":{"1":{}},"component":{}}],["command.getnam",{"_index":537,"title":{},"name":{},"text":{"7":{}},"component":{}}],["command.gettyp",{"_index":510,"title":{},"name":{},"text":{"7":{}},"component":{}}],["commit",{"_index":422,"title":{},"name":{},"text":{"6":{}},"component":{}}],["compon",{"_index":30,"title":{},"name":{"4":{}},"text":{},"component":{}}],["config",{"_index":911,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["config.xml",{"_index":31,"title":{"5-2":{}},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["configloc",{"_index":852,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["configur",{"_index":48,"title":{},"name":{"11":{}},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["configurableapplicationcontext.config_location_delimit",{"_index":755,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["configurablebeanfactory.scope_singleton.equals(definition.getscop",{"_index":817,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["configuration#addmapp",{"_index":152,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration#getmapp",{"_index":839,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["configuration#parametermap",{"_index":175,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.addincompletestatement(statementpars",{"_index":227,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.addloadedresource(\"namespac",{"_index":192,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.addloadedresource(resourc",{"_index":158,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.addmapper(boundtyp",{"_index":193,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.addmapper(mapperinterfac",{"_index":146,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.addmappers(mapperpackag",{"_index":125,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.getdatabaseid",{"_index":219,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.getdefaultresultsettyp",{"_index":314,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.getkeygenerator(keystatementid",{"_index":286,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.getlocalcachescop",{"_index":614,"title":{},"name":{},"text":{"7":{}},"component":{}}],["configuration.getmappedstatement(stat",{"_index":550,"title":{},"name":{},"text":{"7":{}},"component":{}}],["configuration.getobjectfactori",{"_index":565,"title":{},"name":{},"text":{"7":{}},"component":{}}],["configuration.getobjectwrapperfactori",{"_index":566,"title":{},"name":{},"text":{"7":{}},"component":{}}],["configuration.getreflectorfactori",{"_index":567,"title":{},"name":{},"text":{"7":{}},"component":{}}],["configuration.getresultmap(rmid",{"_index":598,"title":{},"name":{},"text":{"7":{}},"component":{}}],["configuration.getsqlfrag",{"_index":138,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.haskeygenerator(keystatementid",{"_index":285,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.hasmapper(boundtyp",{"_index":191,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.isresourceloaded(resourc",{"_index":155,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.isusegeneratedkey",{"_index":288,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configuration.newstatementhandler(wrapp",{"_index":630,"title":{},"name":{},"text":{"7":{}},"component":{}}],["configurationel",{"_index":163,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configurationelement(parser.evalnode(\"/mapp",{"_index":157,"title":{},"name":{},"text":{"5":{}},"component":{}}],["configurationelement(xnod",{"_index":165,"title":{},"name":{},"text":{"5":{}},"component":{}}],["content",{"_index":43,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context",{"_index":166,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["context.getbind",{"_index":392,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getbindings().foreach(boundsql::setadditionalparamet",{"_index":394,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getbooleanattribute(\"flushcach",{"_index":250,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getbooleanattribute(\"resultord",{"_index":255,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getbooleanattribute(\"usecach",{"_index":253,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getbooleanattribute(\"usegeneratedkey",{"_index":287,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getintattribute(\"fetchs",{"_index":299,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getintattribute(\"timeout",{"_index":301,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getnode().getnodenam",{"_index":243,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getstringattribute(\"databaseid",{"_index":235,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getstringattribute(\"id",{"_index":233,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getstringattribute(\"keycolumn",{"_index":318,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getstringattribute(\"keyproperti",{"_index":316,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getstringattribute(\"lang",{"_index":268,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getstringattribute(\"namespac",{"_index":168,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getstringattribute(\"parametermap",{"_index":303,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getstringattribute(\"parametertyp",{"_index":264,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getstringattribute(\"resultmap",{"_index":309,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getstringattribute(\"resultset",{"_index":320,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getstringattribute(\"resultsettyp",{"_index":311,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.getstringattribute(\"resulttyp",{"_index":305,"title":{},"name":{},"text":{"5":{}},"component":{}}],["context.nextresultobject(o",{"_index":571,"title":{},"name":{},"text":{"7":{}},"component":{}}],["continu",{"_index":635,"title":{},"name":{},"text":{"7":{},"10":{},"12":{}},"component":{}}],["creat",{"_index":783,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["createcachekey(m",{"_index":584,"title":{},"name":{},"text":{"7":{}},"component":{}}],["createsqlsessiontempl",{"_index":837,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["createsqlsessiontemplate(sqlsessionfactori",{"_index":835,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["createsqlsource(configur",{"_index":329,"title":{},"name":{},"text":{"5":{}},"component":{}}],["cursor",{"_index":574,"title":{},"name":{},"text":{"7":{}},"component":{}}],["databas",{"_index":553,"title":{},"name":{},"text":{"7":{}},"component":{}}],["databaseid",{"_index":234,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["databaseidmatchescurrent(id",{"_index":236,"title":{},"name":{},"text":{"5":{}},"component":{}}],["databaseidproviderelement(root.evalnode(\"databaseidprovid",{"_index":107,"title":{},"name":{},"text":{"5":{}},"component":{}}],["datasourc",{"_index":848,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["default",{"_index":442,"title":{},"name":{},"text":{"6":{},"7":{},"10":{},"12":{}},"component":{}}],["defaultmapresulthandl",{"_index":562,"title":{},"name":{},"text":{"7":{}},"component":{}}],["defaultmapresulthandler<>(mapkey",{"_index":564,"title":{},"name":{},"text":{"7":{}},"component":{}}],["defaultmethodinvoker(getmethodhandlejava8(method",{"_index":489,"title":{},"name":{},"text":{"7":{}},"component":{}}],["defaultmethodinvoker(getmethodhandlejava9(method",{"_index":490,"title":{},"name":{},"text":{"7":{}},"component":{}}],["defaultresultcontext",{"_index":568,"title":{},"name":{},"text":{"7":{}},"component":{}}],["defaultscop",{"_index":718,"title":{},"name":{},"text":{"10":{},"11":{},"12":{}},"component":{}}],["defaultsqlsess",{"_index":465,"title":{"7-3":{}},"name":{},"text":{"7":{}},"component":{}}],["defaultsqlsessionfactori",{"_index":65,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["defaultsqlsessionfactory(config",{"_index":927,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["deferredload",{"_index":610,"title":{},"name":{},"text":{"7":{}},"component":{}}],["deferredload.load",{"_index":611,"title":{},"name":{},"text":{"7":{}},"component":{}}],["deferredloads.clear",{"_index":613,"title":{},"name":{},"text":{"7":{}},"component":{}}],["definit",{"_index":752,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["definition).getdecorateddefinit",{"_index":776,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["definition.getbeanclassnam",{"_index":782,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["definition.getconstructorargumentvalues().addgenericargumentvalue(beanclassnam",{"_index":788,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["definition.getpropertyvalu",{"_index":803,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["definition.getpropertyvalues().add(\"addtoconfig",{"_index":793,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["definition.issingleton",{"_index":819,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["definition.setattribute(factory_bean_object_typ",{"_index":799,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["definition.setautowiremode(abstractbeandefinition.autowire_by_typ",{"_index":815,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["definition.setbeanclass(this.mapperfactorybeanclass",{"_index":792,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["definition.setlazyinit(lazyiniti",{"_index":816,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["definition.setscope(defaultscop",{"_index":818,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["deleg",{"_index":643,"title":{},"name":{},"text":{"7":{}},"component":{}}],["delet",{"_index":242,"title":{"7-4":{}},"name":{},"text":{"5":{},"7":{}},"component":{}}],["demoplugin",{"_index":462,"title":{},"name":{},"text":{"6":{}},"component":{}}],["detail",{"_index":928,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["dirti",{"_index":548,"title":{},"name":{},"text":{"7":{}},"component":{}}],["document",{"_index":447,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["doquery(m",{"_index":621,"title":{},"name":{},"text":{"7":{}},"component":{}}],["doquery(mappedstat",{"_index":627,"title":{},"name":{},"text":{"7":{}},"component":{}}],["doscan",{"_index":758,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["doscan(str",{"_index":757,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["driver",{"_index":900,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["dynamiccontext",{"_index":384,"title":{},"name":{},"text":{"5":{}},"component":{}}],["dynamiccontext(configur",{"_index":385,"title":{},"name":{},"text":{"5":{}},"component":{}}],["dynamicsqlsourc",{"_index":37,"title":{"5-13":{}},"name":{},"text":{"5":{}},"component":{}}],["dynamicsqlsource(configur",{"_index":361,"title":{},"name":{},"text":{"5":{}},"component":{}}],["e",{"_index":70,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["element",{"_index":148,"title":{},"name":{},"text":{"5":{}},"component":{}}],["empti",{"_index":171,"title":{},"name":{},"text":{"5":{}},"component":{}}],["enabl",{"_index":813,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["environ",{"_index":59,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["environmentselement(root.evalnode(\"environ",{"_index":106,"title":{},"name":{},"text":{"5":{}},"component":{}}],["equals(defaultscop",{"_index":933,"title":{},"name":{},"text":{"11":{}},"component":{}}],["error",{"_index":82,"title":{},"name":{},"text":{"5":{}},"component":{}}],["errorcontext.instance().reset",{"_index":75,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"12":{}},"component":{}}],["errorcontext.instance().resource(ms.getresource()).activity(\"execut",{"_index":601,"title":{},"name":{},"text":{"7":{}},"component":{}}],["errorcontext.instance().resource(resourc",{"_index":133,"title":{},"name":{},"text":{"5":{}},"component":{}}],["errorcontext.instance().resource(url",{"_index":141,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ex",{"_index":910,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["exampl",{"_index":404,"title":{"6-9":{}},"name":{},"text":{},"component":{}}],["except",{"_index":69,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["exceptionfactory.wrapexception(\"error",{"_index":72,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["exceptionutil.unwrapthrowable(t",{"_index":476,"title":{},"name":{},"text":{"7":{}},"component":{}}],["execut",{"_index":504,"title":{},"name":{},"text":{"7":{}},"component":{}}],["execute(sqlsess",{"_index":507,"title":{},"name":{},"text":{"7":{}},"component":{}}],["executeforcursor(sqlsess",{"_index":529,"title":{},"name":{},"text":{"7":{}},"component":{}}],["executeformany(sqlsess",{"_index":524,"title":{},"name":{},"text":{"7":{}},"component":{}}],["executeformap(sqlsess",{"_index":527,"title":{},"name":{},"text":{"7":{}},"component":{}}],["executewithresulthandler(sqlsess",{"_index":522,"title":{},"name":{},"text":{"7":{}},"component":{}}],["execution_placehold",{"_index":620,"title":{},"name":{},"text":{"7":{}},"component":{}}],["executor",{"_index":419,"title":{"7-6":{}},"name":{},"text":{"6":{},"7":{}},"component":{}}],["executor.class",{"_index":456,"title":{},"name":{},"text":{"6":{}},"component":{}}],["executor.query(m",{"_index":558,"title":{},"name":{},"text":{"7":{}},"component":{}}],["executor.querycursor(m",{"_index":576,"title":{},"name":{},"text":{"7":{}},"component":{}}],["executor.update(m",{"_index":551,"title":{},"name":{},"text":{"7":{}},"component":{}}],["executorexception(\"executor",{"_index":603,"title":{},"name":{},"text":{"7":{}},"component":{}}],["executorexception(\"unknown",{"_index":648,"title":{},"name":{},"text":{"7":{}},"component":{}}],["explicitfactoryus",{"_index":800,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["factorybean",{"_index":826,"title":{},"name":{},"text":{"10":{},"11":{},"12":{}},"component":{}}],["fals",{"_index":205,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["feignclient",{"_index":930,"title":{},"name":{},"text":{"11":{}},"component":{}}],["fetchsiz",{"_index":298,"title":{},"name":{},"text":{"5":{}},"component":{}}],["figur",{"_index":324,"title":{},"name":{},"text":{"5":{}},"component":{}}],["file",{"_index":909,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["filter(clazz",{"_index":874,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["final",{"_index":74,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"12":{}},"component":{}}],["flush",{"_index":534,"title":{},"name":{},"text":{"7":{}},"component":{}}],["flushcach",{"_index":248,"title":{},"name":{},"text":{"5":{}},"component":{}}],["flushcache，如果没有配置，select",{"_index":249,"title":{},"name":{},"text":{"5":{}},"component":{}}],["flushstat",{"_index":421,"title":{},"name":{},"text":{"6":{}},"component":{}}],["foreach(targetconfiguration.gettypealiasregistry()::registeralia",{"_index":878,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["foreach(targetconfiguration.gettypehandlerregistry()::regist",{"_index":890,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["foreachhandl",{"_index":346,"title":{},"name":{},"text":{"5":{}},"component":{}}],["found",{"_index":762,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["fragment",{"_index":257,"title":{},"name":{},"text":{"5":{}},"component":{}}],["frommap(importingclassmetadata.getannotationattributes(mapperscans.class.getnam",{"_index":678,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["generatorclass",{"_index":689,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["get",{"_index":906,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["getboundsql",{"_index":379,"title":{},"name":{},"text":{"5":{}},"component":{}}],["getboundsql(object",{"_index":381,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["getconfiguration().getmapper(typ",{"_index":843,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["getgeneratedkey",{"_index":277,"title":{},"name":{},"text":{"5":{}},"component":{}}],["getlanguagedriver(lang",{"_index":272,"title":{},"name":{},"text":{"5":{}},"component":{}}],["getmapp",{"_index":659,"title":{"10-8":{},"12-8":{}},"name":{},"text":{"10":{},"12":{}},"component":{}}],["getmapper(class",{"_index":842,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["getobject",{"_index":827,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["getparameterobject",{"_index":428,"title":{},"name":{},"text":{"6":{}},"component":{}}],["getregistri",{"_index":769,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["getsqlsess",{"_index":658,"title":{"10-7":{},"12-7":{}},"name":{},"text":{"10":{},"12":{}},"component":{}}],["getsqlsession().getmapper(this.mapperinterfac",{"_index":830,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["gettransact",{"_index":424,"title":{},"name":{},"text":{"6":{}},"component":{}}],["handlelocallycachedoutputparameters(m",{"_index":608,"title":{},"name":{},"text":{"7":{}},"component":{}}],["handleoutputparamet",{"_index":432,"title":{},"name":{},"text":{"6":{}},"component":{}}],["handler",{"_index":557,"title":{},"name":{},"text":{"7":{},"10":{},"12":{}},"component":{}}],["handler.handlenode(child",{"_index":377,"title":{},"name":{},"text":{"5":{}},"component":{}}],["handler.query(stmt",{"_index":633,"title":{},"name":{},"text":{"7":{}},"component":{}}],["handleresultset",{"_index":431,"title":{},"name":{},"text":{"6":{}},"component":{}}],["haslength(this.typealiasespackag",{"_index":871,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["haslength(this.typehandlerspackag",{"_index":886,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["hasmapper(typ",{"_index":199,"title":{},"name":{},"text":{"5":{}},"component":{}}],["hasnestedresultmap",{"_index":599,"title":{},"name":{},"text":{"7":{}},"component":{}}],["helper",{"_index":936,"title":{},"name":{"13":{}},"text":{},"component":{}}],["hibern",{"_index":26,"title":{},"name":{},"text":{"2":{}},"component":{}}],["holder",{"_index":771,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["holder.getbeandefinit",{"_index":772,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["holder.getbeannam",{"_index":785,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["https://github.com/mybatis/spr",{"_index":797,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["id",{"_index":232,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["ifhandl",{"_index":348,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ifpresent(targetconfiguration::setdefaultscriptinglanguag",{"_index":902,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["ignor",{"_index":79,"title":{},"name":{},"text":{"5":{},"6":{},"10":{},"12":{}},"component":{}}],["illegalaccessexcept",{"_index":491,"title":{},"name":{},"text":{"7":{}},"component":{}}],["illegalstateexception(\"th",{"_index":779,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["implement",{"_index":463,"title":{},"name":{},"text":{"6":{}},"component":{}}],["import(mapperscannerregistrar.class",{"_index":668,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["import(mapperscannerregistrar.repeatingregistrar.class",{"_index":670,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["importingclassmetadata",{"_index":673,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["includ",{"_index":256,"title":{},"name":{},"text":{"5":{}},"component":{}}],["includepars",{"_index":260,"title":{},"name":{},"text":{"5":{}},"component":{}}],["includeparser.applyincludes(context.getnod",{"_index":262,"title":{},"name":{},"text":{"5":{}},"component":{}}],["incompleteelementexcept",{"_index":226,"title":{},"name":{},"text":{"5":{}},"component":{}}],["incompletexxx",{"_index":156,"title":{},"name":{},"text":{"5":{}},"component":{}}],["index",{"_index":2,"title":{},"name":{"1":{}},"text":{},"component":{}}],["init",{"_index":41,"title":{},"name":{"5":{}},"text":{},"component":{}}],["initializingbean",{"_index":844,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["initnodehandlermap",{"_index":338,"title":{},"name":{},"text":{"5":{}},"component":{}}],["inputstream",{"_index":134,"title":{},"name":{},"text":{"5":{}},"component":{}}],["insert",{"_index":240,"title":{"7-4":{}},"name":{},"text":{"5":{},"7":{}},"component":{}}],["insert和update)这将告诉mybatis使用jdbc",{"_index":276,"title":{},"name":{},"text":{"5":{}},"component":{}}],["instantiationexcept",{"_index":492,"title":{},"name":{},"text":{"7":{}},"component":{}}],["int",{"_index":374,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"12":{}},"component":{}}],["integ",{"_index":297,"title":{},"name":{},"text":{"5":{}},"component":{}}],["integr",{"_index":662,"title":{},"name":{"10":{},"12":{}},"text":{},"component":{}}],["intention",{"_index":78,"title":{},"name":{},"text":{"5":{}},"component":{}}],["intercept",{"_index":403,"title":{"6-8":{}},"name":{},"text":{"6":{}},"component":{}}],["intercept(invoc",{"_index":439,"title":{},"name":{},"text":{"6":{}},"component":{}}],["interceptor",{"_index":402,"title":{"6-7":{}},"name":{},"text":{"6":{}},"component":{}}],["interceptor.plugin(target",{"_index":418,"title":{},"name":{},"text":{"6":{}},"component":{}}],["interceptorchain.pluginall(statementhandl",{"_index":641,"title":{},"name":{},"text":{"7":{}},"component":{}}],["interfac",{"_index":380,"title":{},"name":{},"text":{"5":{},"6":{},"10":{},"12":{}},"component":{}}],["introduct",{"_index":17,"title":{},"name":{"2":{}},"text":{},"component":{}}],["invoc",{"_index":440,"title":{},"name":{},"text":{"6":{}},"component":{}}],["invocationhandl",{"_index":467,"title":{},"name":{},"text":{"7":{}},"component":{}}],["invocationtargetexcept",{"_index":493,"title":{},"name":{},"text":{"7":{}},"component":{}}],["invok",{"_index":468,"title":{},"name":{},"text":{"7":{}},"component":{}}],["invoke(object",{"_index":470,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ioexcept",{"_index":77,"title":{},"name":{},"text":{"5":{}},"component":{}}],["isclos",{"_index":426,"title":{},"name":{},"text":{"6":{}},"component":{}}],["isdynam",{"_index":360,"title":{},"name":{},"text":{"5":{}},"component":{}}],["isempty(this.plugin",{"_index":408,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["isempty(this.scriptinglanguagedriv",{"_index":896,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["isempty(this.typealias",{"_index":879,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["isempty(this.typehandl",{"_index":891,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["isselect",{"_index":246,"title":{},"name":{},"text":{"5":{}},"component":{}}],["issu",{"_index":592,"title":{},"name":{},"text":{"7":{},"10":{},"12":{}},"component":{}}],["jar",{"_index":4,"title":{},"name":{},"text":{"1":{}},"component":{}}],["java",{"_index":21,"title":{},"name":{},"text":{"2":{}},"component":{}}],["java.lang.class",{"_index":328,"title":{},"name":{},"text":{"5":{}},"component":{}}],["java.lang.object",{"_index":544,"title":{},"name":{},"text":{"7":{}},"component":{}}],["java.lang.str",{"_index":53,"title":{},"name":{},"text":{"5":{}},"component":{}}],["java.util.properti",{"_index":54,"title":{},"name":{},"text":{"5":{}},"component":{}}],["javatyp",{"_index":885,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["jdbc",{"_index":19,"title":{},"name":{},"text":{"2":{},"7":{}},"component":{}}],["jdbc3keygenerator.inst",{"_index":290,"title":{},"name":{},"text":{"5":{}},"component":{}}],["jdbctype",{"_index":884,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["jdk",{"_index":466,"title":{},"name":{},"text":{"7":{},"10":{},"12":{}},"component":{}}],["jdk9",{"_index":483,"title":{},"name":{},"text":{"7":{}},"component":{}}],["key",{"_index":231,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["keycolumn",{"_index":317,"title":{},"name":{},"text":{"5":{}},"component":{}}],["keygener",{"_index":281,"title":{},"name":{},"text":{"5":{}},"component":{}}],["keyproperti",{"_index":315,"title":{},"name":{},"text":{"5":{}},"component":{}}],["keystatementid",{"_index":282,"title":{},"name":{},"text":{"5":{}},"component":{}}],["knowmapp",{"_index":206,"title":{},"name":{},"text":{"5":{}},"component":{}}],["known",{"_index":202,"title":{},"name":{},"text":{"5":{}},"component":{}}],["knownmappers.put(typ",{"_index":207,"title":{},"name":{},"text":{"5":{}},"component":{}}],["knownmappers.remove(typ",{"_index":212,"title":{},"name":{},"text":{"5":{}},"component":{}}],["kv",{"_index":401,"title":{},"name":{},"text":{"5":{}},"component":{}}],["lang",{"_index":267,"title":{},"name":{},"text":{"5":{}},"component":{}}],["langdriv",{"_index":271,"title":{},"name":{},"text":{"5":{}},"component":{}}],["langdriver.createsqlsource(configur",{"_index":292,"title":{},"name":{},"text":{"5":{}},"component":{}}],["languag",{"_index":899,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["languagedriv",{"_index":270,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["lazyiniti",{"_index":714,"title":{},"name":{},"text":{"10":{},"11":{},"12":{}},"component":{}}],["learn",{"_index":0,"title":{"1":{}},"name":{},"text":{},"component":{}}],["list",{"_index":218,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"12":{}},"component":{}}],["loadcomplet",{"_index":204,"title":{},"name":{},"text":{"5":{}},"component":{}}],["loadcustomlogimpl(set",{"_index":99,"title":{},"name":{},"text":{"5":{}},"component":{}}],["loadcustomvfs(set",{"_index":98,"title":{},"name":{},"text":{"5":{}},"component":{}}],["localcache.getobject(key",{"_index":607,"title":{},"name":{},"text":{"7":{}},"component":{}}],["localcache.putobject(key",{"_index":619,"title":{},"name":{},"text":{"7":{}},"component":{}}],["localcache.removeobject(key",{"_index":622,"title":{},"name":{},"text":{"7":{}},"component":{}}],["localcachescope.stat",{"_index":615,"title":{},"name":{},"text":{"7":{}},"component":{}}],["localoutputparametercache.putobject(key",{"_index":625,"title":{},"name":{},"text":{"7":{}},"component":{}}],["locat",{"_index":182,"title":{},"name":{},"text":{"5":{}},"component":{}}],["logger.debug",{"_index":411,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["logger.warn",{"_index":761,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["lookup",{"_index":487,"title":{},"name":{},"text":{"7":{}},"component":{}}],["m",{"_index":481,"title":{},"name":{},"text":{"7":{}},"component":{}}],["m.isdefault",{"_index":482,"title":{},"name":{},"text":{"7":{}},"component":{}}],["map",{"_index":525,"title":{},"name":{},"text":{"7":{},"10":{},"12":{}},"component":{}}],["map(beandefinitionholder::getbeandefinit",{"_index":777,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mapkey",{"_index":560,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mappedstat",{"_index":221,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["mappedstatement.class",{"_index":457,"title":{},"name":{},"text":{"6":{}},"component":{}}],["mappedstatement.statementtyp",{"_index":639,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mapper",{"_index":33,"title":{"5-4":{},"5-5":{},"5-6":{},"10-3":{},"10-4":{},"12-3":{},"12-4":{}},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["mapper.java",{"_index":917,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mapper.xml",{"_index":32,"title":{"5-3":{}},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["mapperannotationbuild",{"_index":209,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperannotationbuilder(config",{"_index":210,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperbuilderassist",{"_index":296,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperclass",{"_index":131,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperel",{"_index":113,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperelement(root.evalnode(\"mapp",{"_index":109,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperelement(xnod",{"_index":115,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperfactorybean",{"_index":657,"title":{"10-6":{},"12-6":{}},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mapperfactorybean.class.equals(mapperfactorybeanclass",{"_index":696,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mapperfactorybeanclass",{"_index":694,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mapperinterfac",{"_index":144,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["mapperloc",{"_index":920,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mapperlocation.tostr",{"_index":923,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mappermethod",{"_index":502,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mappermethod(mapperinterfac",{"_index":497,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mappermethod.execute(sqlsess",{"_index":505,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mappermethodinvok",{"_index":478,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mapperpackag",{"_index":123,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperpars",{"_index":136,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperparser.pars",{"_index":139,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperproxi",{"_index":47,"title":{"7-2":{}},"name":{},"text":{"5":{},"7":{},"10":{},"12":{}},"component":{}}],["mapperproxyfactori",{"_index":213,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperproxyfactory<>(typ",{"_index":208,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperregistri",{"_index":46,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperregistry.addmapper(typ",{"_index":196,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mapperscan",{"_index":664,"title":{"11-1":{}},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mapperscannerconfigur",{"_index":665,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mapperscannerregistrar",{"_index":663,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mapperscansattr",{"_index":677,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mapperscansattrs.getannotationarray(\"valu",{"_index":680,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mapresulthandl",{"_index":563,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mapresulthandler.getmappedresult",{"_index":573,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mapresulthandler.handleresult(context",{"_index":572,"title":{},"name":{},"text":{"7":{}},"component":{}}],["maputil.computeifabsent(methodcach",{"_index":480,"title":{},"name":{},"text":{"7":{}},"component":{}}],["markerinterfac",{"_index":685,"title":{},"name":{},"text":{"10":{},"11":{},"12":{}},"component":{}}],["match",{"_index":921,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["method",{"_index":453,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["method.convertargstosqlcommandparam(arg",{"_index":513,"title":{},"name":{},"text":{"7":{}},"component":{}}],["method.getreturntyp",{"_index":542,"title":{},"name":{},"text":{"7":{}},"component":{}}],["method.getreturntype().equals(result.getclass",{"_index":532,"title":{},"name":{},"text":{"7":{}},"component":{}}],["method.getreturntype().isprimit",{"_index":538,"title":{},"name":{},"text":{"7":{}},"component":{}}],["method.hasresulthandl",{"_index":521,"title":{},"name":{},"text":{"7":{}},"component":{}}],["method.invoke(thi",{"_index":473,"title":{},"name":{},"text":{"7":{}},"component":{}}],["method.returnscursor",{"_index":528,"title":{},"name":{},"text":{"7":{}},"component":{}}],["method.returnsmani",{"_index":523,"title":{},"name":{},"text":{"7":{}},"component":{}}],["method.returnsmap",{"_index":526,"title":{},"name":{},"text":{"7":{}},"component":{}}],["method.returnsopt",{"_index":531,"title":{},"name":{},"text":{"7":{}},"component":{}}],["method.returnsvoid",{"_index":520,"title":{},"name":{},"text":{"7":{}},"component":{}}],["methodhandles.lookup",{"_index":486,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mixedsqlnod",{"_index":323,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mixedsqlnode(cont",{"_index":378,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mockitopostprocessor",{"_index":796,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["modifier.isabstract(clazz.getmodifi",{"_index":889,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["more",{"_index":150,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ms",{"_index":549,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ms.getboundsql(paramet",{"_index":582,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ms.getconfigur",{"_index":629,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ms.getstatementlog",{"_index":632,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ms.getstatementtyp",{"_index":623,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ms.isflushcacherequir",{"_index":605,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mybati",{"_index":1,"title":{"1":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"4-1":{},"4-2":{},"5-2":{},"6-2":{},"6-3":{},"9-1":{}},"name":{"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{}},"text":{"2":{},"3":{},"5":{},"10":{},"11":{},"12":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{}}}],["mysql",{"_index":25,"title":{},"name":{},"text":{"2":{}},"component":{}}],["mysql或sql",{"_index":278,"title":{},"name":{},"text":{"5":{}},"component":{}}],["name",{"_index":784,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["namegener",{"_index":931,"title":{},"name":{},"text":{"11":{}},"component":{}}],["namespac",{"_index":167,"title":{},"name":{},"text":{"5":{}},"component":{}}],["namespace.isempti",{"_index":169,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nest",{"_index":591,"title":{},"name":{},"text":{"7":{}},"component":{}}],["nestedioexception(\"fail",{"_index":905,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["new",{"_index":63,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["newstatementhandler(executor",{"_index":637,"title":{},"name":{},"text":{"7":{}},"component":{}}],["node",{"_index":369,"title":{},"name":{},"text":{"5":{}},"component":{}}],["node.getnode().getchildnod",{"_index":373,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nodehandlermap.put(\"bind",{"_index":354,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nodehandlermap.put(\"choos",{"_index":349,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nodehandlermap.put(\"foreach",{"_index":345,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nodehandlermap.put(\"if",{"_index":347,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nodehandlermap.put(\"otherwis",{"_index":352,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nodehandlermap.put(\"set",{"_index":343,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nodehandlermap.put(\"trim",{"_index":339,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nodehandlermap.put(\"when",{"_index":351,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nodehandlermap.put(\"wher",{"_index":341,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nodelist",{"_index":371,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nodenam",{"_index":238,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nokeygenerator.inst",{"_index":291,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nosuchmethodexcept",{"_index":494,"title":{},"name":{},"text":{"7":{}},"component":{}}],["notnull(datasourc",{"_index":847,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["notnull(sqlsessionfactorybuild",{"_index":849,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["null",{"_index":117,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["o",{"_index":570,"title":{},"name":{},"text":{"7":{}},"component":{}}],["object",{"_index":24,"title":{},"name":{},"text":{"2":{},"6":{},"7":{}},"component":{}}],["object.class",{"_index":389,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["object.class.equals(method.getdeclaringclass",{"_index":472,"title":{},"name":{},"text":{"7":{}},"component":{}}],["objectfactori",{"_index":865,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["objectfactoryelement(root.evalnode(\"objectfactori",{"_index":102,"title":{},"name":{},"text":{"5":{}},"component":{}}],["objectwrapperfactori",{"_index":867,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["objectwrapperfactoryelement(root.evalnode(\"objectwrapperfactori",{"_index":103,"title":{},"name":{},"text":{"5":{}},"component":{}}],["old",{"_index":23,"title":{},"name":{},"text":{"2":{}},"component":{}}],["on",{"_index":151,"title":{},"name":{},"text":{"5":{}},"component":{}}],["onc",{"_index":87,"title":{},"name":{},"text":{"5":{}},"component":{}}],["optional.ofnullable(((rootbeandefinit",{"_index":775,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["optional.ofnullable(result",{"_index":533,"title":{},"name":{},"text":{"7":{}},"component":{}}],["optional.ofnullable(this.cache).ifpresent(targetconfiguration::addcach",{"_index":907,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["optional.ofnullable(this.configurationproperties).ifpresent(targetconfiguration::setvari",{"_index":864,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["optional.ofnullable(this.defaultscriptinglanguagedriv",{"_index":901,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["optional.ofnullable(this.objectfactory).ifpresent(targetconfiguration::setobjectfactori",{"_index":866,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["optional.ofnullable(this.objectwrapperfactory).ifpresent(targetconfiguration::setobjectwrapperfactori",{"_index":868,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["optional.ofnullable(this.vfs).ifpresent(targetconfiguration::setvfsimpl",{"_index":870,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["orelsethrow",{"_index":778,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.apache.ibatis.binding.mappermethod#execut",{"_index":506,"title":{},"name":{},"text":{"7":{}},"component":{}}],["org.apache.ibatis.binding.mapperproxy#cachedinvok",{"_index":477,"title":{},"name":{},"text":{"7":{}},"component":{}}],["org.apache.ibatis.binding.mapperproxy#invok",{"_index":469,"title":{},"name":{},"text":{"7":{}},"component":{}}],["org.apache.ibatis.binding.mapperregistry#addmapp",{"_index":197,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.builder.staticsqlsource#getboundsql",{"_index":396,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.builder.xml.xmlconfigbuild",{"_index":50,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.builder.xml.xmlconfigbuilder#mapperel",{"_index":114,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.builder.xml.xmlconfigbuilder#pars",{"_index":83,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.builder.xml.xmlconfigbuilder#parseconfigur",{"_index":90,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["org.apache.ibatis.builder.xml.xmlmapperbuild",{"_index":112,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.builder.xml.xmlmapperbuilder#bindmapperfornamespac",{"_index":183,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.builder.xml.xmlmapperbuilder#buildstatementfromcontext",{"_index":216,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.builder.xml.xmlmapperbuilder#configurationel",{"_index":164,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.builder.xml.xmlmapperbuilder#pars",{"_index":154,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.builder.xml.xmlscriptbuild",{"_index":325,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.builder.xml.xmlstatementbuilder#parsestatementnod",{"_index":229,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.executor.baseexecutor#queri",{"_index":579,"title":{},"name":{},"text":{"7":{}},"component":{}}],["org.apache.ibatis.executor.baseexecutor#queryfromdatabas",{"_index":617,"title":{},"name":{},"text":{"7":{}},"component":{}}],["org.apache.ibatis.executor.simpleexecutor#doqueri",{"_index":626,"title":{},"name":{},"text":{"7":{}},"component":{}}],["org.apache.ibatis.executor.statement.routingstatementhandler#routingstatementhandl",{"_index":642,"title":{},"name":{},"text":{"7":{}},"component":{}}],["org.apache.ibatis.executor.statement.simplestatementhandler#queri",{"_index":651,"title":{},"name":{},"text":{"7":{}},"component":{}}],["org.apache.ibatis.parsing.xnod",{"_index":327,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.plugin.intercept",{"_index":446,"title":{},"name":{},"text":{"6":{}},"component":{}}],["org.apache.ibatis.plugin.interceptor",{"_index":438,"title":{},"name":{},"text":{"6":{}},"component":{}}],["org.apache.ibatis.plugin.interceptorchain#pluginal",{"_index":414,"title":{},"name":{},"text":{"6":{}},"component":{}}],["org.apache.ibatis.plugin.signatur",{"_index":452,"title":{},"name":{},"text":{"6":{}},"component":{}}],["org.apache.ibatis.scripting.defaults.rawsqlsource#getboundsql",{"_index":395,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.scripting.xmltags.dynamicsqlsource#getboundsql",{"_index":383,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.scripting.xmltags.xmllanguagedriver#createsqlsource(org.apache.ibatis.session.configur",{"_index":326,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.scripting.xmltags.xmlscriptbuilder#parsedynamictag",{"_index":366,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.scripting.xmltags.xmlscriptbuilder#parsescriptnod",{"_index":356,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.scripting.xmltags.xmlscriptbuilder#xmlscriptbuild",{"_index":334,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.session.configur",{"_index":855,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.apache.ibatis.session.configuration#addmapp",{"_index":194,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.session.configuration#mapperregistry#knownmapp",{"_index":829,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.apache.ibatis.session.configuration#newstatementhandl",{"_index":636,"title":{},"name":{},"text":{"7":{}},"component":{}}],["org.apache.ibatis.session.configuration.resultmap",{"_index":177,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.apache.ibatis.session.defaults.defaultsqlsession#upd",{"_index":545,"title":{},"name":{},"text":{"7":{}},"component":{}}],["org.apache.ibatis.session.sqlsessionfactorybuilder#build",{"_index":853,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.apache.ibatis.session.sqlsessionfactorybuilder#build(java.io.read",{"_index":52,"title":{},"name":{},"text":{"5":{}},"component":{}}],["org.mybatis.spring.annotation.mapperscan",{"_index":667,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.mybatis.spring.annotation.mapperscannerregistrar#registerbeandefinit",{"_index":932,"title":{},"name":{},"text":{"11":{}},"component":{}}],["org.mybatis.spring.annotation.mapperscannerregistrar.repeatingregistrar#registerbeandefinit",{"_index":671,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.mybatis.spring.mapper.classpathmapperscanner#doscan",{"_index":756,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.mybatis.spring.mapper.classpathmapperscanner#processbeandefinit",{"_index":766,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.mybatis.spring.mapper.mapperfactorybean",{"_index":791,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.mybatis.spring.mapper.mapperfactorybean#getobject",{"_index":828,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.mybatis.spring.mapper.mapperscannerconfigurer#postprocessbeandefinitionregistri",{"_index":730,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.mybatis.spring.sqlsessionfactorybean#afterpropertiesset",{"_index":845,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.mybatis.spring.sqlsessionfactorybean#buildsqlsessionfactori",{"_index":406,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["org.mybatis.spring.sqlsessiontemplate#getmapp",{"_index":841,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.mybatis.spring.support.sqlsessiondaosupport#getsqlsess",{"_index":831,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.mybatis:mybati",{"_index":6,"title":{},"name":{},"text":{"1":{}},"component":{}}],["org.springframework.cloud.openfeign.mapperfactorybean#get",{"_index":836,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["org.springframework.cloud.openfeign.mapperfactorybean#loadbal",{"_index":832,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["origin",{"_index":786,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["otherwisehandl",{"_index":353,"title":{},"name":{},"text":{"5":{}},"component":{}}],["overrid",{"_index":464,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["packag",{"_index":121,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["package\".equals(child.getnam",{"_index":122,"title":{},"name":{},"text":{"5":{}},"component":{}}],["page",{"_index":935,"title":{},"name":{"13":{}},"text":{},"component":{}}],["pagehelp",{"_index":934,"title":{"13":{},"13-1":{}},"name":{},"text":{},"component":{}}],["param",{"_index":398,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["paramet",{"_index":547,"title":{},"name":{},"text":{"7":{}},"component":{}}],["parameter",{"_index":436,"title":{},"name":{},"text":{"6":{}},"component":{}}],["parameterhandl",{"_index":427,"title":{"7-10":{}},"name":{},"text":{"6":{}},"component":{}}],["parametermap",{"_index":302,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["parametermap.getparametermap",{"_index":589,"title":{},"name":{},"text":{"7":{}},"component":{}}],["parametermapelement(context.evalnodes(\"/mapper/parametermap",{"_index":176,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parametermappings.isempti",{"_index":587,"title":{},"name":{},"text":{"7":{}},"component":{}}],["parameterobject",{"_index":382,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["parameterobject.getclass",{"_index":390,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parametertyp",{"_index":263,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parametertypeclass",{"_index":265,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parent",{"_index":116,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parent.getchildren",{"_index":120,"title":{},"name":{},"text":{"5":{}},"component":{}}],["pars",{"_index":84,"title":{},"name":{},"text":{"5":{},"6":{},"10":{},"12":{}},"component":{}}],["parseconfiguration(parser.evalnode(\"/configur",{"_index":89,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parseconfiguration(xnod",{"_index":93,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["parsedynamictags(context",{"_index":359,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parsedynamictags(xnod",{"_index":368,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parsependingcacheref",{"_index":161,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parsependingresultmap",{"_index":160,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parsependingstat",{"_index":162,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parser",{"_index":62,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parser.pars",{"_index":211,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parsescriptnod",{"_index":357,"title":{},"name":{},"text":{"5":{}},"component":{}}],["parsestatementnod",{"_index":230,"title":{},"name":{},"text":{"5":{}},"component":{}}],["plainmethodinvok",{"_index":503,"title":{},"name":{},"text":{"7":{}},"component":{}}],["plainmethodinvoker(new",{"_index":496,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pleas",{"_index":764,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["plu",{"_index":15,"title":{"9":{},"9-1":{}},"name":{"9":{}},"text":{"1":{}},"component":{}}],["plugin",{"_index":405,"title":{},"name":{"6":{}},"text":{"6":{},"10":{},"12":{}},"component":{}}],["plugin(object",{"_index":443,"title":{},"name":{},"text":{"6":{}},"component":{}}],["plugin.wrap(target",{"_index":444,"title":{},"name":{},"text":{"6":{}},"component":{}}],["pluginall(object",{"_index":415,"title":{},"name":{},"text":{"6":{}},"component":{}}],["pluginelement(root.evalnode(\"plugin",{"_index":101,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["pm",{"_index":594,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pm.getresultmapid",{"_index":596,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pojo（plain",{"_index":22,"title":{},"name":{},"text":{"2":{}},"component":{}}],["postprocessbeandefinitionregistri",{"_index":729,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["postprocessbeandefinitionregistry(beandefinitionregistri",{"_index":731,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["pre",{"_index":280,"title":{},"name":{},"text":{"5":{}},"component":{}}],["prefer",{"_index":80,"title":{},"name":{},"text":{"5":{}},"component":{}}],["prepar",{"_index":435,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["preparedstat",{"_index":649,"title":{},"name":{},"text":{"7":{}},"component":{}}],["preparedstatementhandler(executor",{"_index":645,"title":{},"name":{},"text":{"7":{}},"component":{}}],["preparestatement(handl",{"_index":631,"title":{},"name":{},"text":{"7":{}},"component":{}}],["previou",{"_index":81,"title":{},"name":{},"text":{"5":{}},"component":{}}],["primit",{"_index":541,"title":{},"name":{},"text":{"7":{}},"component":{}}],["privat",{"_index":91,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["privatelookupin(class",{"_index":484,"title":{},"name":{},"text":{"7":{}},"component":{}}],["privatelookupinmethod",{"_index":488,"title":{},"name":{},"text":{"7":{}},"component":{}}],["processbeandefinitions(beandefinit",{"_index":765,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["processbeandefinitions(set",{"_index":767,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["processpropertyplacehold",{"_index":733,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["processselectkeynodes(id",{"_index":275,"title":{},"name":{},"text":{"5":{}},"component":{}}],["product",{"_index":29,"title":{},"name":{},"text":{"3":{}},"component":{}}],["properti",{"_index":60,"title":{},"name":{},"text":{"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["propertieselement(root.evalnode(\"properti",{"_index":95,"title":{},"name":{},"text":{"5":{}},"component":{}}],["protect",{"_index":367,"title":{},"name":{},"text":{"5":{},"6":{},"10":{},"12":{}},"component":{}}],["proxi",{"_index":471,"title":{},"name":{},"text":{"7":{},"10":{},"12":{}},"component":{}}],["proxyhold",{"_index":820,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["proxyholder.getbeandefinit",{"_index":825,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["public",{"_index":55,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["queri",{"_index":420,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["query\").object(ms.getid",{"_index":602,"title":{},"name":{},"text":{"7":{}},"component":{}}],["query(m",{"_index":585,"title":{},"name":{},"text":{"7":{}},"component":{}}],["query(mappedstat",{"_index":580,"title":{},"name":{},"text":{"7":{}},"component":{}}],["query(stat",{"_index":652,"title":{},"name":{},"text":{"7":{}},"component":{}}],["queryfromdatabase(m",{"_index":609,"title":{},"name":{},"text":{"7":{}},"component":{}}],["queryfromdatabase(mappedstat",{"_index":618,"title":{},"name":{},"text":{"7":{}},"component":{}}],["querystack",{"_index":604,"title":{},"name":{},"text":{"7":{}},"component":{}}],["rawsqlsourc",{"_index":38,"title":{"5-14":{}},"name":{},"text":{"5":{}},"component":{}}],["rawsqlsource(configur",{"_index":363,"title":{},"name":{},"text":{"5":{}},"component":{}}],["re",{"_index":500,"title":{},"name":{},"text":{"7":{}},"component":{}}],["re.getcaus",{"_index":501,"title":{},"name":{},"text":{"7":{}},"component":{}}],["reader",{"_index":57,"title":{},"name":{},"text":{"5":{}},"component":{}}],["reader.clos",{"_index":76,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ref",{"_index":27,"title":{},"name":{"3":{}},"text":{"5":{}},"component":{}}],["reflectorfactoryelement(root.evalnode(\"reflectorfactori",{"_index":104,"title":{},"name":{},"text":{"5":{}},"component":{}}],["regist",{"_index":412,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["registerbeandefinitions(annotationmetadata",{"_index":672,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["registercursor(cursor",{"_index":577,"title":{},"name":{},"text":{"7":{}},"component":{}}],["registri",{"_index":675,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["registry.containsbeandefinition(proxyholder.getbeannam",{"_index":822,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["registry.registerbeandefinition(beannam",{"_index":726,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["registry.registerbeandefinition(proxyholder.getbeannam",{"_index":824,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["registry.removebeandefinition(proxyholder.getbeannam",{"_index":823,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["remark",{"_index":399,"title":{},"name":{},"text":{"5":{}},"component":{}}],["remov",{"_index":274,"title":{},"name":{},"text":{"5":{}},"component":{}}],["repeatable(mapperscans.class",{"_index":669,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["requir",{"_index":190,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["requireddatabaseid",{"_index":220,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resolveclass(parametertyp",{"_index":266,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resolveclass(resulttyp",{"_index":307,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resolveresultsettype(resultsettyp",{"_index":313,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resourc",{"_index":127,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["resources.classforname(mapperclass",{"_index":145,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resources.classforname(namespac",{"_index":186,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resources.getresourceasstream(resourc",{"_index":135,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resources.geturlasstream(url",{"_index":142,"title":{},"name":{},"text":{"5":{}},"component":{}}],["result",{"_index":508,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resulthandl",{"_index":519,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resulthandler.class",{"_index":459,"title":{},"name":{},"text":{"6":{}},"component":{}}],["resultmap",{"_index":308,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["resultmapelements(context.evalnodes(\"/mapper/resultmap",{"_index":178,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resultord",{"_index":254,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resultset",{"_index":319,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resultsethandl",{"_index":430,"title":{"7-14":{}},"name":{},"text":{"6":{}},"component":{}}],["resultsethandler(handleresultsets，handleoutputparamet",{"_index":433,"title":{},"name":{},"text":{"6":{}},"component":{}}],["resultsethandler.handleresultsets(stat",{"_index":654,"title":{},"name":{},"text":{"7":{}},"component":{}}],["resultsettyp",{"_index":310,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resultsettypeenum",{"_index":312,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resulttyp",{"_index":304,"title":{},"name":{},"text":{"5":{}},"component":{}}],["resulttypeclass",{"_index":306,"title":{},"name":{},"text":{"5":{}},"component":{}}],["retention(retentionpolicy.runtim",{"_index":448,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["return",{"_index":66,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["rm",{"_index":597,"title":{},"name":{},"text":{"7":{}},"component":{}}],["rm.hasnestedresultmap",{"_index":600,"title":{},"name":{},"text":{"7":{}},"component":{}}],["rmid",{"_index":595,"title":{},"name":{},"text":{"7":{}},"component":{}}],["rollback",{"_index":423,"title":{},"name":{},"text":{"6":{}},"component":{}}],["root",{"_index":94,"title":{},"name":{},"text":{"5":{},"6":{},"10":{},"12":{}},"component":{}}],["rootsqlnod",{"_index":358,"title":{},"name":{},"text":{"5":{}},"component":{}}],["rootsqlnode.apply(context",{"_index":386,"title":{},"name":{},"text":{"5":{}},"component":{}}],["routingstatementhandler(executor",{"_index":640,"title":{},"name":{},"text":{"7":{}},"component":{}}],["rowbound",{"_index":556,"title":{},"name":{},"text":{"7":{}},"component":{}}],["rowbounds.class",{"_index":458,"title":{},"name":{},"text":{"6":{}},"component":{}}],["rowcountresult(sqlsession.delete(command.getnam",{"_index":518,"title":{},"name":{},"text":{"7":{}},"component":{}}],["rowcountresult(sqlsession.insert(command.getnam",{"_index":514,"title":{},"name":{},"text":{"7":{}},"component":{}}],["rowcountresult(sqlsession.update(command.getnam",{"_index":517,"title":{},"name":{},"text":{"7":{}},"component":{}}],["runtimebeanreference(this.sqlsessionfactorybeannam",{"_index":805,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["runtimebeanreference(this.sqlsessiontemplatebeannam",{"_index":811,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["runtimeexcept",{"_index":499,"title":{},"name":{},"text":{"7":{}},"component":{}}],["runtimeexception(",{"_index":495,"title":{},"name":{},"text":{"7":{}},"component":{}}],["scanclasses(this.typealiasespackag",{"_index":872,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanclasses(this.typehandlerspackag",{"_index":887,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner",{"_index":735,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.registerfilt",{"_index":750,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.scan",{"_index":753,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.setaddtoconfig(this.addtoconfig",{"_index":737,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.setannotationclass(this.annotationclass",{"_index":738,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.setbeannamegenerator(this.namegener",{"_index":745,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.setdefaultscope(defaultscop",{"_index":749,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.setlazyinitialization(boolean.valueof(lazyiniti",{"_index":747,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.setmapperfactorybeanclass(this.mapperfactorybeanclass",{"_index":746,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.setmarkerinterface(this.markerinterfac",{"_index":739,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.setresourceloader(this.applicationcontext",{"_index":744,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.setsqlsessionfactory(this.sqlsessionfactori",{"_index":740,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.setsqlsessionfactorybeanname(this.sqlsessionfactorybeannam",{"_index":742,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.setsqlsessiontemplate(this.sqlsessiontempl",{"_index":741,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scanner.setsqlsessiontemplatebeanname(this.sqlsessiontemplatebeannam",{"_index":743,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scope",{"_index":780,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scopedproxi",{"_index":773,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scopedproxyfactorybean.class.getname().equals(definition.getbeanclassnam",{"_index":774,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["scopedproxyutils.createscopedproxy(hold",{"_index":821,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["script",{"_index":330,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["select",{"_index":239,"title":{"7-5":{}},"name":{},"text":{"5":{},"7":{}},"component":{}}],["selectcursor(str",{"_index":575,"title":{},"name":{},"text":{"7":{}},"component":{}}],["selectkey",{"_index":273,"title":{},"name":{},"text":{"5":{}},"component":{}}],["selectkeygenerator.select_key_suffix",{"_index":283,"title":{},"name":{},"text":{"5":{}},"component":{}}],["selectlist(stat",{"_index":561,"title":{},"name":{},"text":{"7":{}},"component":{}}],["selectlist(str",{"_index":555,"title":{},"name":{},"text":{"7":{}},"component":{}}],["selectlist、selectmap、selectcursor",{"_index":554,"title":{},"name":{},"text":{"7":{}},"component":{}}],["selectmap(str",{"_index":559,"title":{},"name":{},"text":{"7":{}},"component":{}}],["server等rdbm",{"_index":279,"title":{},"name":{},"text":{"5":{}},"component":{}}],["set",{"_index":96,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["sethandl",{"_index":344,"title":{},"name":{},"text":{"5":{}},"component":{}}],["setparamet",{"_index":429,"title":{},"name":{},"text":{"6":{}},"component":{}}],["setproperties(properti",{"_index":445,"title":{},"name":{},"text":{"6":{}},"component":{}}],["setsqlsessionfactory(sqlsessionfactori",{"_index":833,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["settingsasproperties(root.evalnode(\"set",{"_index":97,"title":{},"name":{},"text":{"5":{}},"component":{}}],["settingselement(set",{"_index":105,"title":{},"name":{},"text":{"5":{}},"component":{}}],["signatur",{"_index":450,"title":{},"name":{},"text":{"6":{}},"component":{}}],["signature(typ",{"_index":455,"title":{},"name":{},"text":{"6":{}},"component":{}}],["simplestatementhandler(executor",{"_index":644,"title":{},"name":{},"text":{"7":{}},"component":{}}],["specifi",{"_index":149,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["spring",{"_index":8,"title":{"11":{},"12":{},"6-3":{}},"name":{"10":{},"11":{},"12":{}},"text":{"1":{},"10":{},"11":{},"12":{}},"component":{}}],["springboot",{"_index":661,"title":{"10":{}},"name":{},"text":{},"component":{}}],["springcontext",{"_index":840,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["springmanagedtransactionfactori",{"_index":915,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["sql",{"_index":34,"title":{"5-7":{},"5-10":{},"7-7":{},"7-13":{}},"name":{"7":{}},"text":{"5":{},"6":{},"7":{}},"component":{}}],["sqlcommandtyp",{"_index":244,"title":{},"name":{},"text":{"5":{}},"component":{}}],["sqlcommandtype.insert.equals(sqlcommandtyp",{"_index":289,"title":{},"name":{},"text":{"5":{}},"component":{}}],["sqlcommandtype.select",{"_index":247,"title":{},"name":{},"text":{"5":{}},"component":{}}],["sqlcommandtype.valueof(nodename.touppercase(locale.english",{"_index":245,"title":{},"name":{},"text":{"5":{}},"component":{}}],["sqlelement(context.evalnodes(\"/mapper/sql",{"_index":179,"title":{},"name":{},"text":{"5":{}},"component":{}}],["sqlexcept",{"_index":581,"title":{},"name":{},"text":{"7":{},"10":{},"12":{}},"component":{}}],["sqlnode",{"_index":322,"title":{},"name":{},"text":{"5":{}},"component":{}}],["sqlsession",{"_index":73,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"12":{}},"component":{}}],["sqlsession.flushstat",{"_index":535,"title":{},"name":{},"text":{"7":{}},"component":{}}],["sqlsession.getconfigur",{"_index":498,"title":{},"name":{},"text":{"7":{}},"component":{}}],["sqlsession.insert",{"_index":512,"title":{},"name":{},"text":{"7":{}},"component":{}}],["sqlsession.selectone(command.getnam",{"_index":530,"title":{},"name":{},"text":{"7":{}},"component":{}}],["sqlsession.upd",{"_index":516,"title":{},"name":{},"text":{"7":{}},"component":{}}],["sqlsessiondaosupport.setsqlsessionfactori",{"_index":801,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["sqlsessionfactori",{"_index":49,"title":{"10-11":{},"12-11":{}},"name":{},"text":{"5":{},"6":{},"10":{},"11":{},"12":{}},"component":{}}],["sqlsessionfactorybean",{"_index":660,"title":{"10-9":{},"12-9":{}},"name":{},"text":{"10":{},"12":{}},"component":{}}],["sqlsessionfactorybuild",{"_index":850,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["sqlsessionfactoryref",{"_index":702,"title":{},"name":{},"text":{"10":{},"11":{},"12":{}},"component":{}}],["sqlsessiontempl",{"_index":666,"title":{},"name":{},"text":{"10":{},"11":{},"12":{}},"component":{}}],["sqlsessiontemplate(sqlsessionfactori",{"_index":838,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["sqlsessiontemplateref",{"_index":698,"title":{},"name":{},"text":{"10":{},"11":{},"12":{}},"component":{}}],["sqlsourc",{"_index":36,"title":{"5-12":{}},"name":{},"text":{"5":{}},"component":{}}],["sqlsource.getboundsql(parameterobject",{"_index":393,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["sqlsourcebuild",{"_index":365,"title":{},"name":{},"text":{"5":{}},"component":{}}],["sqlsourcebuilder(configur",{"_index":388,"title":{},"name":{},"text":{"5":{}},"component":{}}],["sqlsourcepars",{"_index":387,"title":{},"name":{},"text":{"5":{}},"component":{}}],["sqlsourceparser.parse(context.getsql",{"_index":391,"title":{},"name":{},"text":{"5":{}},"component":{}}],["sql、存储过程以及高级映射。mybati",{"_index":18,"title":{},"name":{},"text":{"2":{}},"component":{}}],["sql（不需要处理的sql",{"_index":362,"title":{},"name":{},"text":{"5":{}},"component":{}}],["starter",{"_index":12,"title":{"6-3":{}},"name":{},"text":{"1":{}},"component":{}}],["starter/issues/475",{"_index":798,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["state((configur",{"_index":851,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["statement",{"_index":376,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["statement.execute(sql",{"_index":653,"title":{},"name":{},"text":{"7":{}},"component":{}}],["statementhandl",{"_index":434,"title":{"7-11":{},"7-12":{}},"name":{},"text":{"6":{},"7":{}},"component":{}}],["statementpars",{"_index":222,"title":{},"name":{},"text":{"5":{}},"component":{}}],["statementparser.parsestatementnod",{"_index":225,"title":{},"name":{},"text":{"5":{}},"component":{}}],["statementtyp",{"_index":293,"title":{},"name":{},"text":{"5":{}},"component":{}}],["statementtype.cal",{"_index":624,"title":{},"name":{},"text":{"7":{}},"component":{}}],["statementtype.prepared.tostr",{"_index":295,"title":{},"name":{},"text":{"5":{}},"component":{}}],["statementtype.valueof(context.getstringattribute(\"statementtyp",{"_index":294,"title":{},"name":{},"text":{"5":{}},"component":{}}],["staticsqlsourc",{"_index":39,"title":{"5-15":{}},"name":{},"text":{"5":{}},"component":{}}],["stmt",{"_index":628,"title":{},"name":{},"text":{"7":{}},"component":{}}],["stream.of(this.plugins).foreach(plugin",{"_index":409,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["stream.of(this.scriptinglanguagedrivers).foreach(languagedriv",{"_index":897,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["stream.of(this.typealiases).foreach(typealia",{"_index":880,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["stream.of(this.typehandlers).foreach(typehandl",{"_index":892,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["string",{"_index":58,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["stringutils.collectiontocommadelimitedstring(basepackag",{"_index":723,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["stringutils.hastext(defaultscop",{"_index":748,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["stringutils.hastext(lazyiniti",{"_index":716,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["stringutils.hastext(sqlsessionfactoryref",{"_index":704,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["stringutils.hastext(sqlsessiontemplateref",{"_index":700,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["stringutils.hastext(this.sqlsessionfactorybeannam",{"_index":802,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["stringutils.hastext(this.sqlsessiontemplatebeannam",{"_index":807,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["stringutils.tokenizetostringarray(this.basepackag",{"_index":754,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["super(configur",{"_index":335,"title":{},"name":{},"text":{"5":{}},"component":{}}],["super.doscan(basepackag",{"_index":759,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["switch",{"_index":509,"title":{},"name":{},"text":{"7":{}},"component":{}}],["t",{"_index":475,"title":{},"name":{},"text":{"7":{},"10":{},"12":{}},"component":{}}],["tabl",{"_index":42,"title":{},"name":{},"text":{"5":{}},"component":{}}],["target",{"_index":416,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["target(elementtype.typ",{"_index":449,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["targetclass",{"_index":485,"title":{},"name":{},"text":{"7":{}},"component":{}}],["targetconfigur",{"_index":854,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["targetconfiguration.addinterceptor(plugin",{"_index":410,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["targetconfiguration.getlanguageregistry().register(languagedriv",{"_index":898,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["targetconfiguration.getsqlfrag",{"_index":924,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["targetconfiguration.gettypealiasregistry().registeralias(typealia",{"_index":881,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["targetconfiguration.gettypehandlerregistry().register(typehandl",{"_index":893,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["targetconfiguration.getvari",{"_index":857,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["targetconfiguration.getvariables().putall(this.configurationproperti",{"_index":860,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["targetconfiguration.setdatabaseid(this.databaseidprovider.getdatabaseid(this.datasourc",{"_index":904,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["targetconfiguration.setdefaultenumtypehandler(defaultenumtypehandl",{"_index":895,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["targetconfiguration.setenvironment(new",{"_index":912,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["targetconfiguration.setvariables(this.configurationproperti",{"_index":858,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.addtoconfig",{"_index":794,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.configloc",{"_index":861,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.configur",{"_index":856,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.configurationproperti",{"_index":859,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.context",{"_index":336,"title":{},"name":{},"text":{"5":{}},"component":{}}],["this.databaseidprovid",{"_index":903,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.datasourc",{"_index":916,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.environ",{"_index":913,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.mapperloc",{"_index":918,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.mapperlocations.length",{"_index":919,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.parametertyp",{"_index":337,"title":{},"name":{},"text":{"5":{}},"component":{}}],["this.processpropertyplacehold",{"_index":732,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.requireddatabaseid",{"_index":237,"title":{},"name":{},"text":{"5":{}},"component":{}}],["this.sqlsessionfactori",{"_index":806,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.sqlsessionfactorybuilder.build(targetconfigur",{"_index":413,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["this.sqlsessiontempl",{"_index":812,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.sqlsessiontemplate.getsqlsessionfactori",{"_index":834,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.transactionfactori",{"_index":914,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["this.typealiasessupertype).stream",{"_index":873,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["throw",{"_index":71,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["throwabl",{"_index":441,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["timeout",{"_index":300,"title":{},"name":{},"text":{"5":{}},"component":{}}],["tk",{"_index":938,"title":{},"name":{"14":{}},"text":{},"component":{}}],["tk.mybatis:mapp",{"_index":10,"title":{},"name":{},"text":{"1":{}},"component":{}}],["tkmybati",{"_index":937,"title":{"14":{},"14-1":{}},"name":{},"text":{},"component":{}}],["todo",{"_index":638,"title":{},"name":{},"text":{"7":{}},"component":{}}],["togeth",{"_index":809,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["transact",{"_index":655,"title":{},"name":{"8":{}},"text":{},"component":{}}],["tri",{"_index":61,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["trimhandl",{"_index":340,"title":{},"name":{},"text":{"5":{}},"component":{}}],["true",{"_index":88,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"12":{}},"component":{}}],["type",{"_index":189,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{},"12":{}},"component":{}}],["type.isinterfac",{"_index":198,"title":{},"name":{},"text":{"5":{}},"component":{}}],["typealia",{"_index":883,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["typealiaseselement(root.evalnode(\"typealias",{"_index":100,"title":{},"name":{},"text":{"5":{}},"component":{}}],["typehandl",{"_index":894,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["typehandler.class).stream().filter(clazz",{"_index":888,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["typehandlerelement(root.evalnode(\"typehandl",{"_index":108,"title":{},"name":{},"text":{"5":{}},"component":{}}],["updat",{"_index":241,"title":{"7-4":{}},"name":{},"text":{"5":{},"6":{},"7":{}},"component":{}}],["update(java.lang.str",{"_index":543,"title":{},"name":{},"text":{"7":{}},"component":{}}],["update(str",{"_index":546,"title":{},"name":{},"text":{"7":{}},"component":{}}],["url",{"_index":129,"title":{},"name":{},"text":{"5":{}},"component":{}}],["us",{"_index":86,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["usecach",{"_index":251,"title":{},"name":{},"text":{"5":{}},"component":{}}],["usecache，如果滑配置，select",{"_index":252,"title":{},"name":{},"text":{"5":{}},"component":{}}],["v",{"_index":569,"title":{},"name":{},"text":{"7":{}},"component":{}}],["valu",{"_index":451,"title":{},"name":{},"text":{"6":{},"11":{}},"component":{}}],["version",{"_index":5,"title":{},"name":{},"text":{"1":{}},"component":{}}],["vf",{"_index":869,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["void",{"_index":92,"title":{},"name":{},"text":{"5":{},"6":{},"10":{},"12":{}},"component":{}}],["wherehandl",{"_index":342,"title":{},"name":{},"text":{"5":{}},"component":{}}],["wrapcollection(paramet",{"_index":552,"title":{},"name":{},"text":{"7":{}},"component":{}}],["x",{"_index":417,"title":{},"name":{},"text":{"6":{}},"component":{}}],["xml",{"_index":20,"title":{},"name":{},"text":{"2":{},"5":{},"10":{},"12":{}},"component":{}}],["xmlconfigbuild",{"_index":44,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["xmlconfigbuilder(read",{"_index":64,"title":{},"name":{},"text":{"5":{}},"component":{}}],["xmlconfigbuilder(this.configlocation.getinputstream",{"_index":862,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["xmlconfigbuilder.getconfigur",{"_index":863,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["xmlconfigbuilder.pars",{"_index":908,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["xmlincludetransform",{"_index":259,"title":{},"name":{},"text":{"5":{}},"component":{}}],["xmlincludetransformer(configur",{"_index":261,"title":{},"name":{},"text":{"5":{}},"component":{}}],["xmllanguagedriv",{"_index":269,"title":{},"name":{},"text":{"5":{}},"component":{}}],["xmlmapperbuild",{"_index":45,"title":{},"name":{},"text":{"5":{},"10":{},"12":{}},"component":{}}],["xmlmapperbuilder#configurationel",{"_index":214,"title":{},"name":{},"text":{"5":{}},"component":{}}],["xmlmapperbuilder#pars",{"_index":153,"title":{},"name":{},"text":{"5":{}},"component":{}}],["xmlmapperbuilder(inputstream",{"_index":137,"title":{},"name":{},"text":{"5":{}},"component":{}}],["xmlmapperbuilder(mapperlocation.getinputstream",{"_index":922,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["xmlmapperbuilder.pars",{"_index":925,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["xmlscriptbuild",{"_index":35,"title":{"5-9":{}},"name":{},"text":{"5":{}},"component":{}}],["xmlscriptbuilder(configur",{"_index":332,"title":{},"name":{},"text":{"5":{}},"component":{}}],["xmlstatementbuild",{"_index":180,"title":{},"name":{},"text":{"5":{}},"component":{}}],["xmlstatementbuilder#parsestatementnod",{"_index":228,"title":{},"name":{},"text":{"5":{}},"component":{}}],["xmlstatementbuilder(configur",{"_index":223,"title":{},"name":{},"text":{"5":{}},"component":{}}],["xnode",{"_index":118,"title":{},"name":{},"text":{"5":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"源码版本 Jar Version org.mybatis:mybatis 3.5.9 org.mybatis:mybatis-spring 2.0.6 tk.mybatis:mapper-spring-boot-starter 2.1.5 com.baomidou:mybatis-plus 3.5.1","title":"Learn Mybatis","component":"mybatis","version":"","name":"index","url":"/mybatis/index.html","titles":[]},"2":{"id":2,"text":"什么是 MyBatis？ MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。 MyBatis 自身亮点 第一，MyBatis 本身就是一款设计非常精良、架构设计非常清晰的持久层框架，并且 MyBatis 中还使用到了很多经典的设计模式，例如，工厂方法模式、适配器模式、装饰器模式、代理模式等。 在阅读 MyBatis 代码的时候，你也许会惊奇地发现：原来大师设计出来的代码真的是一种艺术。所以，从这个层面来讲，深入研究 MyBatis 原理，甚至阅读它的源码，不仅可以帮助你快速解决工作中遇到的 MyBatis 相关问题，还可以提高你的设计思维。 第二，MyBatis 提供了很多扩展点，例如，MyBatis 的插件机制、对第三方日志框架和第三方数据源的兼容等。 正由于这种可扩展的能力，让 MyBatis 的生命力非常旺盛，这也是很多 Java 开发人员将 MyBatis 作为自己首选 Java 持久化框架的原因之一，反过来促进了 MyBatis 用户的不断壮大。 第三，开发人员使用 MyBatis 上手会非常快，具有很强的易用性和可靠性。这也是 MyBatis 流行的一个很重要的原因。当你具备了 MySQL 和 JDBC 的基础知识之后，学习 MyBatis 的难度远远小于 Hibernate 等持久化框架。","title":"基本介绍","component":"mybatis","version":"","name":"introduction","url":"/mybatis/introduction.html","titles":[]},"3":{"id":3,"text":"The MyBatis Blog: Products 深入剖析 MyBatis 核心原理","title":"参考文档","component":"mybatis","version":"","name":"ref","url":"/mybatis/ref.html","titles":[{"text":"参考文档","hash":"参考文档","id":1}]},"4":{"id":4,"text":"","title":"MyBatis 的组成","component":"mybatis","version":"","name":"mybatis-component","url":"/mybatis/mybatis/mybatis-component.html","titles":[{"text":"MyBatis 架构","hash":"mybatis-架构","id":1},{"text":"MyBatis 源码","hash":"mybatis-源码","id":2}]},"5":{"id":5,"text":"Table of Contents 时序图 解析 MyBatis-config.xml 解析 mapper.xml 解析 标签 解析 的子标签 注册 mapper 接口 解析 SQL 解析过程 SqlSource BoundSql 基本流程： 使用 XMLConfigBuilder 解析 MyBatis 主配置文件 使用 XMLMapperBuilder 解析 mapper.xml 配置文件 使用 MapperRegistry 注册 mapper 接口，为每个 mapper 接口生成一个 MapperProxy 代理对象 最终执行代理类中的代理方法 核心类： Configuration SqlSessionFactory 对应的解析类 org.apache.ibatis.builder.xml.XMLConfigBuilder，入口在 build 方法。 org.apache.ibatis.session.SqlSessionFactoryBuilder#build(java.io.Reader, java.lang.String, java.util.Properties) public SqlSessionFactory build(Reader reader, String environment, Properties properties) { try { // 同时创建 Configuration XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties); // 解析 MyBatis-config.xml，并返回 DefaultSqlSessionFactory return build(parser.parse()); } catch (Exception e) { throw ExceptionFactory.wrapException(\"Error building SqlSession.\", e); } finally { ErrorContext.instance().reset(); try { reader.close(); } catch (IOException e) { // Intentionally ignore. Prefer previous error. } } } org.apache.ibatis.builder.xml.XMLConfigBuilder#parse public Configuration parse() { if (parsed) { throw new BuilderException(\"Each XMLConfigBuilder can only be used once.\"); } parsed = true; // 解析 mybatis-config.xml 到 Configuration parseConfiguration(parser.evalNode(\"/configuration\")); return configuration; } org.apache.ibatis.builder.xml.XMLConfigBuilder#parseConfiguration private void parseConfiguration(XNode root) { try { propertiesElement(root.evalNode(\"properties\")); Properties settings = settingsAsProperties(root.evalNode(\"settings\")); loadCustomVfs(settings); loadCustomLogImpl(settings); typeAliasesElement(root.evalNode(\"typeAliases\")); pluginElement(root.evalNode(\"plugins\")); objectFactoryElement(root.evalNode(\"objectFactory\")); objectWrapperFactoryElement(root.evalNode(\"objectWrapperFactory\")); reflectorFactoryElement(root.evalNode(\"reflectorFactory\")); settingsElement(settings); environmentsElement(root.evalNode(\"environments\")); databaseIdProviderElement(root.evalNode(\"databaseIdProvider\")); typeHandlerElement(root.evalNode(\"typeHandlers\")); // 使用 XMLMapperBuilder 解析 mapper mapperElement(root.evalNode(\"mappers\")); } catch (Exception e) { throw new BuilderException(\"Error parsing SQL Mapper Configuration. Cause: \" + e, e); } } 对应的解析类 org.apache.ibatis.builder.xml.XMLMapperBuilder，入口在 mapperElement 方法。 org.apache.ibatis.builder.xml.XMLConfigBuilder#mapperElement private void mapperElement(XNode parent) throws Exception { if (parent != null) { for (XNode child : parent.getChildren()) { // package if (\"package\".equals(child.getName())) { String mapperPackage = child.getStringAttribute(\"name\"); configuration.addMappers(mapperPackage); (1) } else { String resource = child.getStringAttribute(\"resource\"); String url = child.getStringAttribute(\"url\"); String mapperClass = child.getStringAttribute(\"class\"); // resource if (resource != null && url == null && mapperClass == null) { ErrorContext.instance().resource(resource); try (InputStream inputStream = Resources.getResourceAsStream(resource)) { XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource , configuration.getSqlFragments()); mapperParser.parse(); (2) } } // url else if (resource == null && url != null && mapperClass == null) { ErrorContext.instance().resource(url); try (InputStream inputStream = Resources.getUrlAsStream(url)) { XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url, configuration.getSqlFragments()); mapperParser.parse(); (2) } } // class else if (resource == null && url == null && mapperClass != null) { Class mapperInterface = Resources.classForName(mapperClass); configuration.addMapper(mapperInterface); (1) } else { throw new BuilderException(\"A mapper element may only specify a url, resource or class, but \" + \"not more than one.\"); } } } } } 1 使用 Configuration#addMapper 解析 mapper， 2 使用 XMLMapperBuilder#parse 解析 mapper，底层用的同样是 Configuration#addMapper org.apache.ibatis.builder.xml.XMLMapperBuilder#parse public void parse() { // 判断是否包含在未解析资源中 if (!configuration.isResourceLoaded(resource)) { // 解析 mapper 的子标签，失败的存入 incompleteXXX configurationElement(parser.evalNode(\"/mapper\")); // 标记为已解析 configuration.addLoadedResource(resource); // 注册 mapper 接口 bindMapperForNamespace(); } // 重新解析 失败的结果集 parsePendingResultMaps(); // 重新解析 失败的缓存ref parsePendingCacheRefs(); // 重新解析 失败的 SQL 语句 parsePendingStatements(); } 在 configurationElement 方法中，当遇到 时，会调用 XMLMapperBuilder 解析 SQL 语句 org.apache.ibatis.builder.xml.XMLMapperBuilder#configurationElement private void configurationElement(XNode context) { try { String namespace = context.getStringAttribute(\"namespace\"); if (namespace == null || namespace.isEmpty()) { throw new BuilderException(\"Mapper's namespace cannot be empty\"); } // 设置 namespace，解析 mapper 接口用 builderAssistant.setCurrentNamespace(namespace); // 解析 二级缓存引用 cacheRefElement(context.evalNode(\"cache-ref\")); // 解析 二级缓存 cacheElement(context.evalNode(\"cache\")); // 参数映射 -> Configuration#parameterMaps parameterMapElement(context.evalNodes(\"/mapper/parameterMap\")); // 结果映射 -> org.apache.ibatis.session.Configuration.resultMaps resultMapElements(context.evalNodes(\"/mapper/resultMap\")); // 解析共用 SQL 片段 sqlElement(context.evalNodes(\"/mapper/sql\")); // 解析 SQL 语句，使用 XMLStatementBuilder buildStatementFromContext(context.evalNodes(\"select|insert|update|delete\")); (1) } catch (Exception e) { throw new BuilderException(\"Error parsing Mapper XML. The XML location is '\" + resource + \"'. Cause: \" + e, e); } } 1 使用 XMLStatementBuilder 解析 xml 中的 SQL 语句 org.apache.ibatis.builder.xml.XMLMapperBuilder#bindMapperForNamespace private void bindMapperForNamespace() { String namespace = builderAssistant.getCurrentNamespace(); if (namespace != null) { Class boundType = null; try { boundType = Resources.classForName(namespace); } catch (ClassNotFoundException e) { // ignore, bound type is not required } if (boundType != null && !configuration.hasMapper(boundType)) { configuration.addLoadedResource(\"namespace:\" + namespace); configuration.addMapper(boundType); (1) } } } 1 使用 Configuration#addMapper 注册 mapper， org.apache.ibatis.session.Configuration#addMapper public void addMapper(Class type) { mapperRegistry.addMapper(type); } org.apache.ibatis.binding.MapperRegistry#addMapper public void addMapper(Class type) { // 只添加接口 if (type.isInterface()) { // 已添加过抛出异常 if (hasMapper(type)) { throw new BindingException(\"Type \" + type + \" is already known to the MapperRegistry.\"); } boolean loadCompleted = false; try { // 保存代理工厂到 knowMapper knownMappers.put(type, new MapperProxyFactory<>(type)); (1) // 解析接口中的注解和 xml 文件 MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type); parser.parse(); loadCompleted = true; } finally { // 如果添加失败，则删除 if (!loadCompleted) { knownMappers.remove(type); } } } } 1 在这里 mapper 接口被替换成了 MapperProxyFactory 在 XMLMapperBuilder#configurationElement 方法的最后，调用 buildStatementFromContext 方法解析 SQL。 org.apache.ibatis.builder.xml.XMLMapperBuilder#buildStatementFromContext private void buildStatementFromContext(List list) { if (configuration.getDatabaseId() != null) { buildStatementFromContext(list, configuration.getDatabaseId()); } buildStatementFromContext(list, null); } org.apache.ibatis.builder.xml.XMLMapperBuilder#buildStatementFromContext private void buildStatementFromContext(List list, String requiredDatabaseId) { // 每个 SQL 语句对应一个 MappedStatement for (XNode context : list) { final XMLStatementBuilder statementParser = new XMLStatementBuilder(configuration, builderAssistant, context, requiredDatabaseId); try { // 解析 SQL 并添加到 Configuration statementParser.parseStatementNode(); } catch (IncompleteElementException e) { configuration.addIncompleteStatement(statementParser); } } } 具体的解析在 XMLStatementBuilder#parseStatementNode 方法中。 .org.apache.ibatis.builder.xml.XMLStatementBuilder#parseStatementNode public void parseStatementNode() { // key String id = context.getStringAttribute(\"id\"); String databaseId = context.getStringAttribute(\"databaseId\"); // 根据 databaseId 判断是否加载 SQL 标签 if (!databaseIdMatchesCurrent(id, databaseId, this.requiredDatabaseId)) { return; } // nodeName : select insert update delete String nodeName = context.getNode().getNodeName(); // SQL 类型 SqlCommandType sqlCommandType = SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH)); boolean isSelect = sqlCommandType == SqlCommandType.SELECT; // 是否刷新缓存，如果配置了 flushCache 使用 flushCache，如果没有配置，select 语句为 false，非 select 语句为 true boolean flushCache = context.getBooleanAttribute(\"flushCache\", !isSelect); // 是否使用二级缓存，如果配置了 useCache 使用 useCache，如果滑配置，select 语句为 true boolean useCache = context.getBooleanAttribute(\"useCache\", isSelect); boolean resultOrdered = context.getBooleanAttribute(\"resultOrdered\", false); // 解析 SQL 片段 // Include Fragments before parsing XMLIncludeTransformer includeParser = new XMLIncludeTransformer(configuration, builderAssistant); includeParser.applyIncludes(context.getNode()); String parameterType = context.getStringAttribute(\"parameterType\"); Class parameterTypeClass = resolveClass(parameterType); String lang = context.getStringAttribute(\"lang\"); // 在 new Configuration() 时设置，默认值为 XMLLanguageDriver LanguageDriver langDriver = getLanguageDriver(lang); // 解析 selectKey // Parse selectKey after includes and remove them. processSelectKeyNodes(id, parameterTypeClass, langDriver); // (仅限INSERT和UPDATE)这将告诉MyBatis使用JDBC getGeneratedKeys 方法来检索由数据库内部生成的键(例如，MySQL或SQL Server等RDBMS中的自动增量字段)。默认： // false 。 // Parse the SQL (pre: and were parsed and removed) KeyGenerator keyGenerator; String keyStatementId = id + SelectKeyGenerator.SELECT_KEY_SUFFIX; keyStatementId = builderAssistant.applyCurrentNamespace(keyStatementId, true); if (configuration.hasKeyGenerator(keyStatementId)) { keyGenerator = configuration.getKeyGenerator(keyStatementId); } else { keyGenerator = context.getBooleanAttribute(\"useGeneratedKeys\", configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType)) ? Jdbc3KeyGenerator.INSTANCE : NoKeyGenerator.INSTANCE; } // SQL 解析 SqlSource sqlSource = langDriver.createSqlSource(configuration, context, parameterTypeClass); (1) StatementType statementType = StatementType.valueOf(context.getStringAttribute(\"statementType\", StatementType.PREPARED.toString())); // 解析标签属性，提供给 MapperBuilderAssistant 使用 Integer fetchSize = context.getIntAttribute(\"fetchSize\"); Integer timeout = context.getIntAttribute(\"timeout\"); String parameterMap = context.getStringAttribute(\"parameterMap\"); String resultType = context.getStringAttribute(\"resultType\"); Class resultTypeClass = resolveClass(resultType); String resultMap = context.getStringAttribute(\"resultMap\"); String resultSetType = context.getStringAttribute(\"resultSetType\"); ResultSetType resultSetTypeEnum = resolveResultSetType(resultSetType); if (resultSetTypeEnum == null) { resultSetTypeEnum = configuration.getDefaultResultSetType(); } String keyProperty = context.getStringAttribute(\"keyProperty\"); String keyColumn = context.getStringAttribute(\"keyColumn\"); String resultSets = context.getStringAttribute(\"resultSets\"); // 向 Configuration 添加 MappedStatement 对象 builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType, fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass, resultSetTypeEnum, flushCache, useCache, resultOrdered, keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets); (2) } 1 最终得到 SqlSource 对象 2 为每条 SQL 标签创建一个 MappedStatement 对象，保存在 Configuration 中。 基于 SqlNode 接口的组合模式，SqlNode 接口提供了非常多的实现类（如下图），其中很多实现类都对应一个动态 SQL 标签（叶子节点），其中 MixedSqlNode 实现类是作为非叶子节点，实现管理子节点的相关方法。 Figure 1. SqlNode 继承关系图 对应的解析类 org.apache.ibatis.builder.xml.XMLScriptBuilder 入口在 mapperElement 方法。 org.apache.ibatis.scripting.xmltags.XMLLanguageDriver#createSqlSource(org.apache.ibatis.session.Configuration, org.apache.ibatis.parsing.XNode, java.lang.Class) public SqlSource createSqlSource(Configuration configuration, XNode script, Class parameterType) { XMLScriptBuilder builder = new XMLScriptBuilder(configuration, script, parameterType); return builder.parseScriptNode(); } org.apache.ibatis.scripting.xmltags.XMLScriptBuilder#XMLScriptBuilder public XMLScriptBuilder(Configuration configuration, XNode context, Class parameterType) { super(configuration); this.context = context; this.parameterType = parameterType; initNodeHandlerMap(); (1) } 1 initNodeHandlerMap 方法初始化了全部的动态 SQL 标签解析器 private void initNodeHandlerMap() { nodeHandlerMap.put(\"trim\", new TrimHandler()); nodeHandlerMap.put(\"where\", new WhereHandler()); nodeHandlerMap.put(\"set\", new SetHandler()); nodeHandlerMap.put(\"foreach\", new ForEachHandler()); nodeHandlerMap.put(\"if\", new IfHandler()); nodeHandlerMap.put(\"choose\", new ChooseHandler()); nodeHandlerMap.put(\"when\", new IfHandler()); nodeHandlerMap.put(\"otherwise\", new OtherwiseHandler()); nodeHandlerMap.put(\"bind\", new BindHandler()); } org.apache.ibatis.scripting.xmltags.XMLScriptBuilder#parseScriptNode public SqlSource parseScriptNode() { MixedSqlNode rootSqlNode = parseDynamicTags(context); (1) SqlSource sqlSource; // 存在未解析的 ${} 或者存在动态标签则为动态 SQL if (isDynamic) { // 动态SQL sqlSource = new DynamicSqlSource(configuration, rootSqlNode); (2) } else { // 原生SQL（不需要处理的SQL） sqlSource = new RawSqlSource(configuration, rootSqlNode, parameterType); (3) } // 最终得到的是 StaticSqlSource 对象 return sqlSource; (2) } 1 解析动态 SQL 标签，并判断是否是动态 SQL 并修改 isDynamic 2 DynamicSqlSource 中运行时 解析 #{} 和 ${} 3 RawSqlSource 中会在创建时使用 SqlSourceBuilder 解析 #{}，替换成 ? org.apache.ibatis.scripting.xmltags.XMLScriptBuilder#parseDynamicTags protected MixedSqlNode parseDynamicTags(XNode node) { List contents = new ArrayList<>(); NodeList children = node.getNode().getChildNodes(); // 遍历所有子节点 for (int i = 0; i in SQL statement.\"); } handler.handleNode(child, contents); isDynamic = true; } } return new MixedSqlNode(contents); (1) } 1 得到组合模式中的非叶子节点 SqlSource 中只有一个方法 getBoundSql ，控制着动态 SQL 语句解析的整个流程，此方法会返回数据库可以执行的 SQL。 public interface SqlSource { BoundSql getBoundSql(Object parameterObject); } org.apache.ibatis.scripting.xmltags.DynamicSqlSource#getBoundSql public BoundSql getBoundSql(Object parameterObject) { DynamicContext context = new DynamicContext(configuration, parameterObject); rootSqlNode.apply(context); SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration); Class parameterType = parameterObject == null ? Object.class : parameterObject.getClass(); // 解析 #{} SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings()); // 解析 ${} BoundSql boundSql = sqlSource.getBoundSql(parameterObject); context.getBindings().forEach(boundSql::setAdditionalParameter); return boundSql; } org.apache.ibatis.scripting.defaults.RawSqlSource#getBoundSql public BoundSql getBoundSql(Object parameterObject) { return sqlSource.getBoundSql(parameterObject); } org.apache.ibatis.builder.StaticSqlSource#getBoundSql public BoundSql getBoundSql(Object parameterObject) { return new BoundSql(configuration, sql, parameterMappings, parameterObject); } param remark sql 解析之后的 SQL 语句 parameterMappings 每个 #{} 占位符的属性信息 additionalParameters DynamicContext 中记录的 KV 信息 parameterObject 实参信息","title":"MyBatis 初始化流程","component":"mybatis","version":"","name":"mybatis-init","url":"/mybatis/mybatis/mybatis-init.html","titles":[{"text":"时序图","hash":"时序图","id":1},{"text":"解析 MyBatis-config.xml","hash":"解析-mybatis-config-xml","id":2},{"text":"解析 mapper.xml","hash":"解析-mapper-xml","id":3},{"text":"解析 <mapper> 标签","hash":"解析-mapper-标签","id":4},{"text":"解析 <mapper> 的子标签","hash":"解析-mapper-的子标签","id":5},{"text":"注册 mapper 接口","hash":"注册-mapper-接口","id":6},{"text":"解析 SQL","hash":"解析-sql","id":7},{"text":"解析过程","hash":"解析过程","id":8},{"text":"创建 XMLScriptBuilder","hash":"创建-xmlscriptbuilder","id":9},{"text":"解析 SQL 标签","hash":"解析-sql-标签","id":10},{"text":"解析过程","hash":"解析过程-2","id":11},{"text":"SqlSource","hash":"sqlsource","id":12},{"text":"DynamicSqlSource","hash":"dynamicsqlsource","id":13},{"text":"RawSqlSource","hash":"rawsqlsource","id":14},{"text":"StaticSqlSource","hash":"staticsqlsource","id":15},{"text":"BoundSql","hash":"boundsql","id":16}]},"6":{"id":6,"text":"org.apache.ibatis.builder.xml.XMLConfigBuilder#parseConfiguration private void parseConfiguration(XNode root) { try { // ignore pluginElement(root.evalNode(\"plugins\")); // ignore } catch (Exception e) { throw new BuilderException(\"Error parsing SQL Mapper Configuration. Cause: \" + e, e); } } org.mybatis.spring.SqlSessionFactoryBean#buildSqlSessionFactory protected SqlSessionFactory buildSqlSessionFactory() throws Exception { // ignore if (!isEmpty(this.plugins)) { Stream.of(this.plugins).forEach(plugin -> { targetConfiguration.addInterceptor(plugin); LOGGER.debug(() -> \"Registered plugin: '\" + plugin + \"'\"); }); } // ignore return this.sqlSessionFactoryBuilder.build(targetConfiguration); } org.apache.ibatis.plugin.InterceptorChain#pluginAll public Object pluginAll(Object target) { // 循环应用插件，加载顺序 1->2->3 ，执行顺序 3->2->1->x->1->2->3 for (Interceptor interceptor : interceptors) { // 责任链 target = interceptor.plugin(target); } // 返回最终代理对象 return target; } Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed) ParameterHandler (getParameterObject, setParameters) ResultSetHandler (handleResultSets, handleOutputParameters) ResultSetHandler(handleResultSets，handleOutputParameters) StatementHandler (prepare, parameterize, batch, update, query) org.apache.ibatis.plugin.Interceptor public interface Interceptor { // 拦截逻辑 Object intercept(Invocation invocation) throws Throwable; // 触发逻辑 default Object plugin(Object target) { return Plugin.wrap(target, this); } // 初始化逻辑 default void setProperties(Properties properties) { } } org.apache.ibatis.plugin.Intercepts @Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface Intercepts { /** * 返回要截取的方法签名。 */ Signature[] value(); } org.apache.ibatis.plugin.Signature @Documented @Retention(RetentionPolicy.RUNTIME) @Target({}) public @interface Signature { /** * 切入类 */ Class type(); /** * 切入方法 */ String method(); /** * 切入方法的参数 */ Class[] args(); } @Intercepts({ @Signature(type = Executor.class, method = \"query\", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class}), @Signature(type = Executor.class, method = \"query\", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class}), @Signature(type = Executor.class, method = \"update\", args = {MappedStatement.class, Object.class}) }) public class DemoPlugin implements Interceptor { @Override public Object intercept(Invocation invocation) throws Throwable { } @Override public Object plugin(Object target) { return Plugin.wrap(target, this); } @Override public void setProperties(Properties properties) { } }","title":"MyBatis 插件","component":"mybatis","version":"","name":"mybatis-plugin","url":"/mybatis/mybatis/mybatis-plugin.html","titles":[{"text":"插件的加载","hash":"插件的加载","id":1},{"text":"mybatis","hash":"mybatis","id":2},{"text":"mybatis-spring-boot-starter","hash":"mybatis-spring-boot-starter","id":3},{"text":"插件的执行","hash":"插件的执行","id":4},{"text":"可以拦截的方法","hash":"可以拦截的方法","id":5},{"text":"实现方式","hash":"实现方式","id":6},{"text":"实现 Interceptor 接口。","hash":"实现-interceptor-接口","id":7},{"text":"添加 Intercepts 注释","hash":"添加-intercepts-注释","id":8},{"text":"Example","hash":"example","id":9}]},"7":{"id":7,"text":"MapperProxy 实现了 JDK 动态代理的 InvocationHandler 接口，当 执行 mapper 中的方法是会进入到 MapperProxy 的 invoke 方法。 org.apache.ibatis.binding.MapperProxy#invoke public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { try { // Object方法直接执行 if (Object.class.equals(method.getDeclaringClass())) { return method.invoke(this, args); } // 执行 Mapper 中的方法 return cachedInvoker(method).invoke(proxy, method, args, sqlSession); } catch (Throwable t) { throw ExceptionUtil.unwrapThrowable(t); } } org.apache.ibatis.binding.MapperProxy#cachedInvoker private MapperMethodInvoker cachedInvoker(Method method) throws Throwable { try { // 先查缓存的方法 return MapUtil.computeIfAbsent(methodCache, method, m -> { // 处理接口中的默认方法 if (m.isDefault()) { try { // JDK9 新方法 privateLookupIn(Class targetClass, MethodHandles.Lookup lookup) if (privateLookupInMethod == null) { return new DefaultMethodInvoker(getMethodHandleJava8(method)); } else { return new DefaultMethodInvoker(getMethodHandleJava9(method)); } } catch (IllegalAccessException | InstantiationException | InvocationTargetException | NoSuchMethodException e) { throw new RuntimeException(e); } } // 处理其它方法 else { return new PlainMethodInvoker(new MapperMethod(mapperInterface, method, sqlSession.getConfiguration())); (1) } }); } catch (RuntimeException re) { Throwable cause = re.getCause(); throw cause == null ? re : cause; } } 1 每个方法对应一个 MapperMethod 对象。 PlainMethodInvoker 是 MapperProxy 中的一个内部类，同样实现了 InvocationHandler 接口。在 invoke 方法中调用了 MapperMethod 的 execute 方法。 @Override public Object invoke(Object proxy, Method method, Object[] args, SqlSession sqlSession) throws Throwable { return mapperMethod.execute(sqlSession, args); } MapperMethod 的 execute 方法中调用 sqlSession 中定义的方法执行 SQL org.apache.ibatis.binding.MapperMethod#execute public Object execute(SqlSession sqlSession, Object[] args) { Object result; switch (command.getType()) { case INSERT: { // sqlSession.insert() Object param = method.convertArgsToSqlCommandParam(args); result = rowCountResult(sqlSession.insert(command.getName(), param)); break; } // sqlSession.update() case UPDATE: { Object param = method.convertArgsToSqlCommandParam(args); result = rowCountResult(sqlSession.update(command.getName(), param)); break; } // sqlSession.() case DELETE: { Object param = method.convertArgsToSqlCommandParam(args); result = rowCountResult(sqlSession.delete(command.getName(), param)); break; } case SELECT: // 当返回空 or 持有 ResultHandler if (method.returnsVoid() && method.hasResultHandler()) { executeWithResultHandler(sqlSession, args); result = null; } // 当返回集合 or 数组 else if (method.returnsMany()) { result = executeForMany(sqlSession, args); } // 当返回 Map else if (method.returnsMap()) { result = executeForMap(sqlSession, args); } // 当返回 游标 else if (method.returnsCursor()) { result = executeForCursor(sqlSession, args); } else { Object param = method.convertArgsToSqlCommandParam(args); result = sqlSession.selectOne(command.getName(), param); if (method.returnsOptional() && (result == null || !method.getReturnType().equals(result.getClass()))) { result = Optional.ofNullable(result); } } break; case FLUSH: result = sqlSession.flushStatements(); break; default: throw new BindingException(\"Unknown execution method for: \" + command.getName()); } if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) { throw new BindingException(\"Mapper method '\" + command.getName() + \" attempted to return null from a method with a primitive return type (\" + method.getReturnType() + \").\"); } return result; } DefaultSqlSession 是 DefaultSqlSession 的默认实现 全都进入 update(java.lang.String, java.lang.Object) org.apache.ibatis.session.defaults.DefaultSqlSession#update public int update(String statement, Object parameter) { try { dirty = true; MappedStatement ms = configuration.getMappedStatement(statement); return executor.update(ms, wrapCollection(parameter)); } catch (Exception e) { throw ExceptionFactory.wrapException(\"Error updating database. Cause: \" + e, e); } finally { ErrorContext.instance().reset(); } } 根据返回值的不同分进入 selectList、selectMap、selectCursor 方法。 private List selectList(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) { try { MappedStatement ms = configuration.getMappedStatement(statement); return executor.query(ms, wrapCollection(parameter), rowBounds, handler); } catch (Exception e) { throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e); } finally { ErrorContext.instance().reset(); } } public Map selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) { final List list = selectList(statement, parameter, rowBounds); final DefaultMapResultHandler mapResultHandler = new DefaultMapResultHandler<>(mapKey, configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory()); final DefaultResultContext context = new DefaultResultContext<>(); for (V o : list) { context.nextResultObject(o); mapResultHandler.handleResult(context); } return mapResultHandler.getMappedResults(); } public Cursor selectCursor(String statement, Object parameter, RowBounds rowBounds) { try { MappedStatement ms = configuration.getMappedStatement(statement); Cursor cursor = executor.queryCursor(ms, wrapCollection(parameter), rowBounds); registerCursor(cursor); return cursor; } catch (Exception e) { throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e); } finally { ErrorContext.instance().reset(); } } 这些方法都是在 BaseExecutor 中定义的模板方法，具体执行 SQL 操作的方法由子类来实现。 BaseExecutor 作为基干类，其中除了定义的 SQL 执行的模板方法外，还有一级缓存相关的处理。 org.apache.ibatis.executor.BaseExecutor#query public List query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException { // 获取 SQL BoundSql boundSql = ms.getBoundSql(parameter); // 获取缓存 Key CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql); return query(ms, parameter, rowBounds, resultHandler, key, boundSql); } public BoundSql getBoundSql(Object parameterObject) { BoundSql boundSql = sqlSource.getBoundSql(parameterObject); (1) List parameterMappings = boundSql.getParameterMappings(); if (parameterMappings == null || parameterMappings.isEmpty()) { boundSql = new BoundSql(configuration, boundSql.getSql(), parameterMap.getParameterMappings(), parameterObject); } // check for nested result maps in parameter mappings (issue #30) for (ParameterMapping pm : boundSql.getParameterMappings()) { String rmId = pm.getResultMapId(); if (rmId != null) { ResultMap rm = configuration.getResultMap(rmId); if (rm != null) { hasNestedResultMaps |= rm.hasNestedResultMaps(); } } } return boundSql; } 1 这里会解析动态 SQL 中的 #{} 和 ${} org.apache.ibatis.executor.BaseExecutor#query public List query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException { ErrorContext.instance().resource(ms.getResource()).activity(\"executing a query\").object(ms.getId()); if (closed) { throw new ExecutorException(\"Executor was closed.\"); } if (queryStack == 0 && ms.isFlushCacheRequired()) { clearLocalCache(); } List list; try { queryStack++; // 先查缓存 list = resultHandler == null ? (List) localCache.getObject(key) : null; if (list != null) { // 存储过程返回值缓存的位置不同，需要单独处理 handleLocallyCachedOutputParameters(ms, key, parameter, boundSql); } else { // 查库 list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql); } } finally { queryStack--; } if (queryStack == 0) { for (DeferredLoad deferredLoad : deferredLoads) { deferredLoad.load(); } // issue #601 deferredLoads.clear(); if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) { // issue #482 clearLocalCache(); } } return list; } org.apache.ibatis.executor.BaseExecutor#queryFromDatabase private List queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException { List list; localCache.putObject(key, EXECUTION_PLACEHOLDER); try { // 真正的查询逻辑在子类 list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql); } finally { localCache.removeObject(key); } localCache.putObject(key, list); if (ms.getStatementType() == StatementType.CALLABLE) { localOutputParameterCache.putObject(key, parameter); } return list; } org.apache.ibatis.executor.SimpleExecutor#doQuery public List doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler , BoundSql boundSql) throws SQLException { Statement stmt = null; try { Configuration configuration = ms.getConfiguration(); // 从 Configuration 中获取 StatementHandler StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql); stmt = prepareStatement(handler, ms.getStatementLog()); return handler.query(stmt, resultHandler); } finally { closeStatement(stmt); } } To Be Continued. org.apache.ibatis.session.Configuration#newStatementHandler public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) { // TODO 策略模式 // 根据 MappedStatement.statementType 返回不同的 StatementHandler StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql); // 应用插件 statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler); return statementHandler; } org.apache.ibatis.executor.statement.RoutingStatementHandler#RoutingStatementHandler public RoutingStatementHandler(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) { switch (ms.getStatementType()) { case STATEMENT: (1) delegate = new SimpleStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql); break; case PREPARED: (2) delegate = new PreparedStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql); break; case CALLABLE: (3) delegate = new CallableStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql); break; default: throw new ExecutorException(\"Unknown statement type: \" + ms.getStatementType()); } } 1 可直接操作的 SQL ，对应 JDBC 的 Statement 2 预处理处理器 ，对应 JDBC 的 PreparedStatement 3 存储过程处理器 ，对应 JDBC 的 CallableStatement org.apache.ibatis.executor.statement.SimpleStatementHandler#query public List query(Statement statement, ResultHandler resultHandler) throws SQLException { String sql = boundSql.getSql(); statement.execute(sql); return resultSetHandler.handleResultSets(statement); } To Be Continued.","title":"MyBatis 执行流程","component":"mybatis","version":"","name":"mybatis-sql","url":"/mybatis/mybatis/mybatis-sql.html","titles":[{"text":"时序图","hash":"时序图","id":1},{"text":"MapperProxy","hash":"mapperproxy","id":2},{"text":"DefaultSqlSession","hash":"defaultsqlsession","id":3},{"text":"insert update delete 方法","hash":"insert-update-delete-方法","id":4},{"text":"select 方法","hash":"select-方法","id":5},{"text":"Executor","hash":"executor","id":6},{"text":"获取 SQL","hash":"获取-sql","id":7},{"text":"一级缓存处理","hash":"一级缓存处理","id":8},{"text":"查库","hash":"查库","id":9},{"text":"ParameterHandler","hash":"parameterhandler","id":10},{"text":"StatementHandler","hash":"statementhandler","id":11},{"text":"创建 StatementHandler","hash":"创建-statementhandler","id":12},{"text":"执行 SQL","hash":"执行-sql","id":13},{"text":"ResultSetHandler","hash":"resultsethandler","id":14}]},"8":{"id":8,"text":"","title":"MyBatis 事务","component":"mybatis","version":"","name":"mybatis-transaction","url":"/mybatis/mybatis/mybatis-transaction.html","titles":[]},"9":{"id":9,"text":"","title":"MyBatis-Plus","component":"mybatis","version":"","name":"mybatis-plus","url":"/mybatis/mybatis-plus/mybatis-plus.html","titles":[{"text":"MyBatis-Plus","hash":"mybatis-plus","id":1}]},"10":{"id":10,"text":"基本流程： 使用 MapperScannerRegistrar 扫包并 根据 MapperScan 信息，注入一个 MapperScannerConfigurer 在 Mapper 的 BeanDefinition 加载后，实例化之前修改注入类型为 MapperFactoryBean 。 使用 MapperFactoryBean 为每个 Mapper 接口生成 JDK 的动态代理 MapperProxy 。 核心类： MapperScannerConfigurer MapperFactoryBean SqlSessionTemplate SqlSessionFactoryBean org.mybatis.spring.annotation.MapperScan @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @Documented @Import(MapperScannerRegistrar.class) (1) @Repeatable(MapperScans.class) (2) public @interface MapperScan { // ... } org.mybatis.spring.annotation.MapperScans @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @Documented @Import(MapperScannerRegistrar.RepeatingRegistrar.class) (3) public @interface MapperScans { // ... } 1 导入 Mapper 扫描注入器 2 重复标注会生成 MapperScans 注解 3 导入批量的 Mapper 扫描注入器 org.mybatis.spring.annotation.MapperScannerRegistrar.RepeatingRegistrar#registerBeanDefinitions public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) { AnnotationAttributes mapperScansAttrs = AnnotationAttributes .fromMap(importingClassMetadata.getAnnotationAttributes(MapperScans.class.getName())); if (mapperScansAttrs != null) { AnnotationAttributes[] annotations = mapperScansAttrs.getAnnotationArray(\"value\"); for (int i = 0; i annotationClass = annoAttrs.getClass(\"annotationClass\"); if (!Annotation.class.equals(annotationClass)) { builder.addPropertyValue(\"annotationClass\", annotationClass); } Class markerInterface = annoAttrs.getClass(\"markerInterface\"); if (!Class.class.equals(markerInterface)) { builder.addPropertyValue(\"markerInterface\", markerInterface); } Class generatorClass = annoAttrs.getClass(\"nameGenerator\"); if (!BeanNameGenerator.class.equals(generatorClass)) { builder.addPropertyValue(\"nameGenerator\", BeanUtils.instantiateClass(generatorClass)); } Class mapperFactoryBeanClass = annoAttrs.getClass(\"factoryBean\"); if (!MapperFactoryBean.class.equals(mapperFactoryBeanClass)) { builder.addPropertyValue(\"mapperFactoryBeanClass\", mapperFactoryBeanClass); } String sqlSessionTemplateRef = annoAttrs.getString(\"sqlSessionTemplateRef\"); if (StringUtils.hasText(sqlSessionTemplateRef)) { builder.addPropertyValue(\"sqlSessionTemplateBeanName\", annoAttrs.getString(\"sqlSessionTemplateRef\")); } String sqlSessionFactoryRef = annoAttrs.getString(\"sqlSessionFactoryRef\"); if (StringUtils.hasText(sqlSessionFactoryRef)) { builder.addPropertyValue(\"sqlSessionFactoryBeanName\", annoAttrs.getString(\"sqlSessionFactoryRef\")); } List basePackages = new ArrayList<>(); basePackages.addAll( Arrays.stream(annoAttrs.getStringArray(\"value\")).filter(StringUtils::hasText).collect(Collectors.toList())); basePackages.addAll(Arrays.stream(annoAttrs.getStringArray(\"basePackages\")).filter(StringUtils::hasText) .collect(Collectors.toList())); basePackages.addAll(Arrays.stream(annoAttrs.getClassArray(\"basePackageClasses\")).map(ClassUtils::getPackageName) .collect(Collectors.toList())); // 未配置，使用 MapperScans 所在包 if (basePackages.isEmpty()) { basePackages.add(getDefaultBasePackage(annoMeta)); } String lazyInitialization = annoAttrs.getString(\"lazyInitialization\"); if (StringUtils.hasText(lazyInitialization)) { builder.addPropertyValue(\"lazyInitialization\", lazyInitialization); } String defaultScope = annoAttrs.getString(\"defaultScope\"); if (!AbstractBeanDefinition.SCOPE_DEFAULT.equals(defaultScope)) { builder.addPropertyValue(\"defaultScope\", defaultScope); } // , 拼接字符串 builder.addPropertyValue(\"basePackage\", StringUtils.collectionToCommaDelimitedString(basePackages)); // beanName is `cc.implicated.demo.MybatisDemoApplication#MapperScannerRegistrar#0` registry.registerBeanDefinition(beanName, builder.getBeanDefinition()); } MapperScannerConfigurer 实现了 BeanDefinitionRegistryPostProcessor 接口，会在 BeanDefinition 加载后，实例化之前执行 postProcessBeanDefinitionRegistry 方法。 org.mybatis.spring.mapper.MapperScannerConfigurer#postProcessBeanDefinitionRegistry public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) { // 后置处理器 在 BeanDefinition 加载后，实例化之前执行 // 解析 MapperScan 属性中的占位符，默认 true if (this.processPropertyPlaceHolders) { processPropertyPlaceHolders(); } // mapper 扫描器 ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry); // 是否要将 Mapper 接口添加到 Configuration 全局配置对象中 scanner.setAddToConfig(this.addToConfig); // 设置 MapperScan 中的属性 scanner.setAnnotationClass(this.annotationClass); scanner.setMarkerInterface(this.markerInterface); scanner.setSqlSessionFactory(this.sqlSessionFactory); scanner.setSqlSessionTemplate(this.sqlSessionTemplate); scanner.setSqlSessionFactoryBeanName(this.sqlSessionFactoryBeanName); scanner.setSqlSessionTemplateBeanName(this.sqlSessionTemplateBeanName); scanner.setResourceLoader(this.applicationContext); scanner.setBeanNameGenerator(this.nameGenerator); scanner.setMapperFactoryBeanClass(this.mapperFactoryBeanClass); if (StringUtils.hasText(lazyInitialization)) { scanner.setLazyInitialization(Boolean.valueOf(lazyInitialization)); } if (StringUtils.hasText(defaultScope)) { scanner.setDefaultScope(defaultScope); } // 添加扫描过滤器 scanner.registerFilters(); // 扫描 and 加载 bean definition scanner.scan( StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS)); } org.mybatis.spring.mapper.ClassPathMapperScanner#doScan public Set doScan(String... basePackages) { // 调用父类的doScan方法，扫描并加载 bean Set beanDefinitions = super.doScan(basePackages); if (beanDefinitions.isEmpty()) { LOGGER.warn(() -> \"No MyBatis mapper was found in '\" + Arrays.toString(basePackages) + \"' package. Please check your configuration.\"); } else { // 修改加载的 Bean Definition processBeanDefinitions(beanDefinitions); (1) } return beanDefinitions; } 1 核心处理逻辑 处理前 处理后 org.mybatis.spring.mapper.ClassPathMapperScanner#processBeanDefinitions private void processBeanDefinitions(Set beanDefinitions) { AbstractBeanDefinition definition; BeanDefinitionRegistry registry = getRegistry(); // 修改全部的 BeanDefinition for (BeanDefinitionHolder holder : beanDefinitions) { definition = (AbstractBeanDefinition) holder.getBeanDefinition(); boolean scopedProxy = false; if (ScopedProxyFactoryBean.class.getName().equals(definition.getBeanClassName())) { definition = (AbstractBeanDefinition) Optional.ofNullable(((RootBeanDefinition) definition).getDecoratedDefinition()) .map(BeanDefinitionHolder::getBeanDefinition) .orElseThrow(() -> new IllegalStateException(\"The target bean definition of scoped proxy bean not found. \" + \"Root bean definition[\" + holder + \"]\")); scopedProxy = true; } // 获取原类型 String beanClassName = definition.getBeanClassName(); LOGGER.debug(() -> \"Creating MapperFactoryBean with name '\" + holder.getBeanName() + \"' and '\" + beanClassName + \"' \" + \"mapperInterface\"); // 设置 MapperFactoryBean 构造器参数 mapperInterface，指定泛型 // the mapper interface is the original class of the bean // but, the actual class of the bean is MapperFactoryBean definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName); // issue #59 // 修改 beanClass 为 org.mybatis.spring.mapper.MapperFactoryBean definition.setBeanClass(this.mapperFactoryBeanClass); (1) // 是否要将接口添加到 Configuration 全局配置对象中，默认为 True definition.getPropertyValues().add(\"addToConfig\", this.addToConfig); // Attribute for MockitoPostProcessor // https://github.com/mybatis/spring-boot-starter/issues/475 definition.setAttribute(FACTORY_BEAN_OBJECT_TYPE, beanClassName); // 是否指定了 SqlSessionFactory boolean explicitFactoryUsed = false; // 添加 sqlSessionFactory // SqlSessionDaoSupport.setSqlSessionFactory() if (StringUtils.hasText(this.sqlSessionFactoryBeanName)) { definition.getPropertyValues() .add(\"sqlSessionFactory\", new RuntimeBeanReference(this.sqlSessionFactoryBeanName)); explicitFactoryUsed = true; } else if (this.sqlSessionFactory != null) { definition.getPropertyValues() .add(\"sqlSessionFactory\", this.sqlSessionFactory); explicitFactoryUsed = true; } // 添加 sqlSessionTemplate if (StringUtils.hasText(this.sqlSessionTemplateBeanName)) { // sqlSessionTemplate 覆盖 sqlSessionFactory if (explicitFactoryUsed) { LOGGER.warn(() -> \"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. \" + \"sqlSessionFactory is ignored.\"); } definition.getPropertyValues() .add(\"sqlSessionTemplate\", new RuntimeBeanReference(this.sqlSessionTemplateBeanName)); explicitFactoryUsed = true; } else if (this.sqlSessionTemplate != null) { if (explicitFactoryUsed) { LOGGER.warn(() -> \"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. \" + \"sqlSessionFactory is ignored.\"); } definition.getPropertyValues() .add(\"sqlSessionTemplate\", this.sqlSessionTemplate); explicitFactoryUsed = true; } // 上面没有找到对应的 SqlSessionFactory 或者 sqlSessionTemplate，则指定 mapper 通过类型注入 // 注入方式 by type （全局唯一） if (!explicitFactoryUsed) { LOGGER.debug(() -> \"Enabling autowire by type for MapperFactoryBean with name '\" + holder.getBeanName() + \"'.\"); definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE); } definition.setLazyInit(lazyInitialization); if (scopedProxy) { continue; } if (ConfigurableBeanFactory.SCOPE_SINGLETON.equals(definition.getScope()) && defaultScope != null) { definition.setScope(defaultScope); } // 非单例 if (!definition.isSingleton()) { BeanDefinitionHolder proxyHolder = ScopedProxyUtils.createScopedProxy(holder, registry, true); if (registry.containsBeanDefinition(proxyHolder.getBeanName())) { registry.removeBeanDefinition(proxyHolder.getBeanName()); } registry.registerBeanDefinition(proxyHolder.getBeanName(), proxyHolder.getBeanDefinition()); } } } 1 关键步骤，将 Mapper 接口注入到 Spring 容器中的类型修改 MapperFactoryBean MapperFactoryBean 实现了 FactoryBean 接口。 在注册 MapperFactoryBean 时，会把 getObject() 方法返回的对象注入到 Spring 容器中。 org.mybatis.spring.mapper.MapperFactoryBean#getObject public T getObject() throws Exception { // 从 org.apache.ibatis.session.Configuration#mapperRegistry#knownMappers 中返回 MapperProxy代理对象 return getSqlSession().getMapper(this.mapperInterface); } org.mybatis.spring.support.SqlSessionDaoSupport#getSqlSession public SqlSession getSqlSession() { return this.sqlSessionTemplate; (1) } 1 返回一个 SqlSession 类型的对象 SqlSessionTemplate org.springframework.cloud.openfeign.MapperFactoryBean#loadBalance public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) { // sqlSessionTemplate 覆盖 sqlSessionFactory if (this.sqlSessionTemplate == null || sqlSessionFactory != this.sqlSessionTemplate.getSqlSessionFactory()) { this.sqlSessionTemplate = createSqlSessionTemplate(sqlSessionFactory); (1) } } 1 使用 SqlSessionFactory 初始化 SqlSessionTemplate org.springframework.cloud.openfeign.MapperFactoryBean#get protected SqlSessionTemplate createSqlSessionTemplate( SqlSessionFactory sqlSessionFactory) { return new SqlSessionTemplate(sqlSessionFactory); } getMapper 方法中调用 Configuration#getMapper() 方法，最终得到返回的 MapperProxy 对象注入到 SpringContext 中。 org.mybatis.spring.SqlSessionTemplate#getMapper public T getMapper(Class type) { return getConfiguration().getMapper(type, this); } SqlSessionFactoryBean 实现了 FactoryBean 接口和 InitializingBean 接口。 SqlSessionFactoryBean 一般是手动注入，它内部持有了 Mybatis 的全局配置对象 Configuration 。 org.mybatis.spring.SqlSessionFactoryBean#afterPropertiesSet public void afterPropertiesSet() throws Exception { notNull(dataSource, \"Property 'dataSource' is required\"); notNull(sqlSessionFactoryBuilder, \"Property 'sqlSessionFactoryBuilder' is required\"); state((configuration == null && configLocation == null) || !(configuration != null && configLocation != null), \"Property 'configuration' and 'configLocation' can not specified with together\"); this.sqlSessionFactory = buildSqlSessionFactory(); (1) } 1 代替了 org.apache.ibatis.session.SqlSessionFactoryBuilder#build 方法。 org.mybatis.spring.SqlSessionFactoryBean#buildSqlSessionFactory protected SqlSessionFactory buildSqlSessionFactory() throws Exception { final Configuration targetConfiguration; XMLConfigBuilder xmlConfigBuilder = null; // 加载 org.apache.ibatis.session.Configuration // 1. 已存在 org.apache.ibatis.session.Configuration if (this.configuration != null) { targetConfiguration = this.configuration; if (targetConfiguration.getVariables() == null) { targetConfiguration.setVariables(this.configurationProperties); } else if (this.configurationProperties != null) { targetConfiguration.getVariables().putAll(this.configurationProperties); } } // 2. 配置了 mybatis-config.xml 配置文件 else if (this.configLocation != null) { xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, this.configurationProperties); targetConfiguration = xmlConfigBuilder.getConfiguration(); } // 3. 都未指定，创建一个 Configuration 对象 else { LOGGER.debug( () -> \"Property 'configuration' or 'configLocation' not specified, using default MyBatis \" + \"Configuration\"); targetConfiguration = new Configuration(); Optional.ofNullable(this.configurationProperties).ifPresent(targetConfiguration::setVariables); } // 注册 ObjectFactory Optional.ofNullable(this.objectFactory).ifPresent(targetConfiguration::setObjectFactory); // 注册 ObjectWrapperFactory Optional.ofNullable(this.objectWrapperFactory).ifPresent(targetConfiguration::setObjectWrapperFactory); // 注册 VFS Optional.ofNullable(this.vfs).ifPresent(targetConfiguration::setVfsImpl); // 类型别名 // 它只与XML配置相关，其存在只是为了减少完全限定类名的冗余键入 if (hasLength(this.typeAliasesPackage)) { scanClasses(this.typeAliasesPackage, this.typeAliasesSuperType).stream() // 过滤掉匿名类 .filter(clazz -> !clazz.isAnonymousClass()) // 过滤接口 .filter(clazz -> !clazz.isInterface()) // 过滤掉内部类 .filter(clazz -> !clazz.isMemberClass()) // 注册别名 .forEach(targetConfiguration.getTypeAliasRegistry()::registerAlias); } // 单个类型别名 if (!isEmpty(this.typeAliases)) { Stream.of(this.typeAliases).forEach(typeAlias -> { targetConfiguration.getTypeAliasRegistry().registerAlias(typeAlias); LOGGER.debug(() -> \"Registered type alias: '\" + typeAlias + \"'\"); }); } // 注册插件 if (!isEmpty(this.plugins)) { Stream.of(this.plugins).forEach(plugin -> { targetConfiguration.addInterceptor(plugin); LOGGER.debug(() -> \"Registered plugin: '\" + plugin + \"'\"); }); } // 类型转换器 // JDBCType 与 JAVAType 互转 if (hasLength(this.typeHandlersPackage)) { scanClasses(this.typeHandlersPackage, TypeHandler.class).stream().filter(clazz -> !clazz.isAnonymousClass()) // 过滤接口 .filter(clazz -> !clazz.isInterface()) // 过滤抽象类 .filter(clazz -> !Modifier.isAbstract(clazz.getModifiers())) // 注册类型转换器 .forEach(targetConfiguration.getTypeHandlerRegistry()::register); } // 单个类型转换器 if (!isEmpty(this.typeHandlers)) { Stream.of(this.typeHandlers).forEach(typeHandler -> { targetConfiguration.getTypeHandlerRegistry().register(typeHandler); LOGGER.debug(() -> \"Registered type handler: '\" + typeHandler + \"'\"); }); } // 枚举转换器 targetConfiguration.setDefaultEnumTypeHandler(defaultEnumTypeHandler); if (!isEmpty(this.scriptingLanguageDrivers)) { Stream.of(this.scriptingLanguageDrivers).forEach(languageDriver -> { targetConfiguration.getLanguageRegistry().register(languageDriver); LOGGER.debug(() -> \"Registered scripting language driver: '\" + languageDriver + \"'\"); }); } Optional.ofNullable(this.defaultScriptingLanguageDriver) .ifPresent(targetConfiguration::setDefaultScriptingLanguage); // 数据库id if (this.databaseIdProvider != null) { try { targetConfiguration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource)); } catch (SQLException e) { throw new NestedIOException(\"Failed getting a databaseId\", e); } } // 缓存 Optional.ofNullable(this.cache).ifPresent(targetConfiguration::addCache); // 如果不为空，解析 mybatis 配置 if (xmlConfigBuilder != null) { try { xmlConfigBuilder.parse(); LOGGER.debug(() -> \"Parsed configuration file: '\" + this.configLocation + \"'\"); } catch (Exception ex) { throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation, ex); } finally { ErrorContext.instance().reset(); } } // 设置 MyBatis Environment // MyBatis 支持多数据源，但每个 sqlSessionFactory 只能选择一个 // 多个数据源需要创建多个 SqlSessionFactory 实例 targetConfiguration.setEnvironment(new Environment( // id，默认为 SqlSessionFactoryBean this.environment, // 事务管理器 this.transactionFactory == null ? new SpringManagedTransactionFactory() : this.transactionFactory, // 数据源 this.dataSource)); // 注册 mapper.java 和 mapper.xml 文件 if (this.mapperLocations != null) { if (this.mapperLocations.length == 0) { LOGGER.warn(() -> \"Property 'mapperLocations' was specified but matching resources are not found.\"); } else { // 遍历全部 mapper 接口 for (Resource mapperLocation : this.mapperLocations) { if (mapperLocation == null) { continue; } try { XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(), targetConfiguration, mapperLocation.toString(), targetConfiguration.getSqlFragments()); // 解析 mapper.java 和 mapper.xml 文件 xmlMapperBuilder.parse(); } catch (Exception e) { throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e); } finally { ErrorContext.instance().reset(); } LOGGER.debug(() -> \"Parsed mapper file: '\" + mapperLocation + \"'\"); } } } else { LOGGER.debug(() -> \"Property 'mapperLocations' was not specified.\"); } return this.sqlSessionFactoryBuilder.build(targetConfiguration); (1) } 1 实际注入的是 DefaultSqlSessionFactory 。 org.apache.ibatis.session.SqlSessionFactoryBuilder#build public SqlSessionFactory build(Configuration config) { return new DefaultSqlSessionFactory(config); } Details public SqlSessionFactory getObject() throws Exception { // 如果为空，则初始化 if (this.sqlSessionFactory == null) { afterPropertiesSet(); } return this.sqlSessionFactory; }","title":"SpringBoot 整合 MyBatis 原理","component":"mybatis","version":"","name":"mybatis-spring-boot-integrations","url":"/mybatis/mybatis-spring/mybatis-spring-boot-integrations.html","titles":[{"text":"时序图","hash":"时序图","id":1},{"text":"入口","hash":"入口","id":2},{"text":"Mapper 注入器","hash":"mapper-注入器","id":3},{"text":"注入 Mapper 接口","hash":"注入-mapper-接口","id":4},{"text":"修改加载的 BeanDefinition","hash":"修改加载的-beandefinition","id":5},{"text":"MapperFactoryBean","hash":"mapperfactorybean","id":6},{"text":"getSqlSession()","hash":"getsqlsession","id":7},{"text":"getMapper()","hash":"getmapper","id":8},{"text":"SqlSessionFactoryBean","hash":"sqlsessionfactorybean","id":9},{"text":"初始化","hash":"初始化","id":10},{"text":"注入 SqlSessionFactory","hash":"注入-sqlsessionfactory","id":11}]},"11":{"id":11,"text":"property 作用 默认值 value 同basePackages basePackages 扫描MyBatis接口的基本程序包 （字符串数组）。 只有至少有一个方法的接口才会被注册；具体类将被忽略。 basePackageClasses 扫描指定的每个类所在的包下面的所有被 @FeignClient 修饰的类 nameGenerator annotationClass markerInterface sqlSessionTemplateRef 多数据源配置 指定在Spring上下文中有多个 SqlSessionTemplate 的情况下使用哪个 SqlSessionTemplate 。 sqlSessionFactoryRef 多数据源配置 指定在Spring上下文中有多个 SqlSessionFactory 的情况下使用哪个 SqlSessionFactory 。 factoryBean lazyInitialization 是否启用映射器Bean的延迟初始化。 defaultScope null org.mybatis.spring.annotation.MapperScannerRegistrar#registerBeanDefinitions() if (!\"\".equals(defaultScope)) { builder.addPropertyValue(\"defaultScope\", defaultScope); }","title":"MyBatis-Spring 配置项","component":"mybatis","version":"","name":"mybatis-spring-configuration","url":"/mybatis/mybatis-spring/mybatis-spring-configuration.html","titles":[{"text":"@MapperScan","hash":"mapperscan","id":1}]},"12":{"id":12,"text":"基本流程： 使用 MapperScannerRegistrar 扫包并 根据 MapperScan 信息，注入一个 MapperScannerConfigurer 在 Mapper 的 BeanDefinition 加载后，实例化之前修改注入类型为 MapperFactoryBean 。 使用 MapperFactoryBean 为每个 Mapper 接口生成 JDK 的动态代理 MapperProxy 。 核心类： MapperScannerConfigurer MapperFactoryBean SqlSessionTemplate SqlSessionFactoryBean org.mybatis.spring.annotation.MapperScan @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @Documented @Import(MapperScannerRegistrar.class) (1) @Repeatable(MapperScans.class) (2) public @interface MapperScan { // ... } org.mybatis.spring.annotation.MapperScans @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @Documented @Import(MapperScannerRegistrar.RepeatingRegistrar.class) (3) public @interface MapperScans { // ... } 1 导入 Mapper 扫描注入器 2 重复标注会生成 MapperScans 注解 3 导入批量的 Mapper 扫描注入器 org.mybatis.spring.annotation.MapperScannerRegistrar.RepeatingRegistrar#registerBeanDefinitions public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) { AnnotationAttributes mapperScansAttrs = AnnotationAttributes .fromMap(importingClassMetadata.getAnnotationAttributes(MapperScans.class.getName())); if (mapperScansAttrs != null) { AnnotationAttributes[] annotations = mapperScansAttrs.getAnnotationArray(\"value\"); for (int i = 0; i annotationClass = annoAttrs.getClass(\"annotationClass\"); if (!Annotation.class.equals(annotationClass)) { builder.addPropertyValue(\"annotationClass\", annotationClass); } Class markerInterface = annoAttrs.getClass(\"markerInterface\"); if (!Class.class.equals(markerInterface)) { builder.addPropertyValue(\"markerInterface\", markerInterface); } Class generatorClass = annoAttrs.getClass(\"nameGenerator\"); if (!BeanNameGenerator.class.equals(generatorClass)) { builder.addPropertyValue(\"nameGenerator\", BeanUtils.instantiateClass(generatorClass)); } Class mapperFactoryBeanClass = annoAttrs.getClass(\"factoryBean\"); if (!MapperFactoryBean.class.equals(mapperFactoryBeanClass)) { builder.addPropertyValue(\"mapperFactoryBeanClass\", mapperFactoryBeanClass); } String sqlSessionTemplateRef = annoAttrs.getString(\"sqlSessionTemplateRef\"); if (StringUtils.hasText(sqlSessionTemplateRef)) { builder.addPropertyValue(\"sqlSessionTemplateBeanName\", annoAttrs.getString(\"sqlSessionTemplateRef\")); } String sqlSessionFactoryRef = annoAttrs.getString(\"sqlSessionFactoryRef\"); if (StringUtils.hasText(sqlSessionFactoryRef)) { builder.addPropertyValue(\"sqlSessionFactoryBeanName\", annoAttrs.getString(\"sqlSessionFactoryRef\")); } List basePackages = new ArrayList<>(); basePackages.addAll( Arrays.stream(annoAttrs.getStringArray(\"value\")).filter(StringUtils::hasText).collect(Collectors.toList())); basePackages.addAll(Arrays.stream(annoAttrs.getStringArray(\"basePackages\")).filter(StringUtils::hasText) .collect(Collectors.toList())); basePackages.addAll(Arrays.stream(annoAttrs.getClassArray(\"basePackageClasses\")).map(ClassUtils::getPackageName) .collect(Collectors.toList())); // 未配置，使用 MapperScans 所在包 if (basePackages.isEmpty()) { basePackages.add(getDefaultBasePackage(annoMeta)); } String lazyInitialization = annoAttrs.getString(\"lazyInitialization\"); if (StringUtils.hasText(lazyInitialization)) { builder.addPropertyValue(\"lazyInitialization\", lazyInitialization); } String defaultScope = annoAttrs.getString(\"defaultScope\"); if (!AbstractBeanDefinition.SCOPE_DEFAULT.equals(defaultScope)) { builder.addPropertyValue(\"defaultScope\", defaultScope); } // , 拼接字符串 builder.addPropertyValue(\"basePackage\", StringUtils.collectionToCommaDelimitedString(basePackages)); // beanName is `cc.implicated.demo.MybatisDemoApplication#MapperScannerRegistrar#0` registry.registerBeanDefinition(beanName, builder.getBeanDefinition()); } MapperScannerConfigurer 实现了 BeanDefinitionRegistryPostProcessor 接口，会在 BeanDefinition 加载后，实例化之前执行 postProcessBeanDefinitionRegistry 方法。 org.mybatis.spring.mapper.MapperScannerConfigurer#postProcessBeanDefinitionRegistry public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) { // 后置处理器 在 BeanDefinition 加载后，实例化之前执行 // 解析 MapperScan 属性中的占位符，默认 true if (this.processPropertyPlaceHolders) { processPropertyPlaceHolders(); } // mapper 扫描器 ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry); // 是否要将 Mapper 接口添加到 Configuration 全局配置对象中 scanner.setAddToConfig(this.addToConfig); // 设置 MapperScan 中的属性 scanner.setAnnotationClass(this.annotationClass); scanner.setMarkerInterface(this.markerInterface); scanner.setSqlSessionFactory(this.sqlSessionFactory); scanner.setSqlSessionTemplate(this.sqlSessionTemplate); scanner.setSqlSessionFactoryBeanName(this.sqlSessionFactoryBeanName); scanner.setSqlSessionTemplateBeanName(this.sqlSessionTemplateBeanName); scanner.setResourceLoader(this.applicationContext); scanner.setBeanNameGenerator(this.nameGenerator); scanner.setMapperFactoryBeanClass(this.mapperFactoryBeanClass); if (StringUtils.hasText(lazyInitialization)) { scanner.setLazyInitialization(Boolean.valueOf(lazyInitialization)); } if (StringUtils.hasText(defaultScope)) { scanner.setDefaultScope(defaultScope); } // 添加扫描过滤器 scanner.registerFilters(); // 扫描 and 加载 bean definition scanner.scan( StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS)); } org.mybatis.spring.mapper.ClassPathMapperScanner#doScan public Set doScan(String... basePackages) { // 调用父类的doScan方法，扫描并加载 bean Set beanDefinitions = super.doScan(basePackages); if (beanDefinitions.isEmpty()) { LOGGER.warn(() -> \"No MyBatis mapper was found in '\" + Arrays.toString(basePackages) + \"' package. Please check your configuration.\"); } else { // 修改加载的 Bean Definition processBeanDefinitions(beanDefinitions); (1) } return beanDefinitions; } 1 核心处理逻辑 处理前 处理后 org.mybatis.spring.mapper.ClassPathMapperScanner#processBeanDefinitions private void processBeanDefinitions(Set beanDefinitions) { AbstractBeanDefinition definition; BeanDefinitionRegistry registry = getRegistry(); // 修改全部的 BeanDefinition for (BeanDefinitionHolder holder : beanDefinitions) { definition = (AbstractBeanDefinition) holder.getBeanDefinition(); boolean scopedProxy = false; if (ScopedProxyFactoryBean.class.getName().equals(definition.getBeanClassName())) { definition = (AbstractBeanDefinition) Optional.ofNullable(((RootBeanDefinition) definition).getDecoratedDefinition()) .map(BeanDefinitionHolder::getBeanDefinition) .orElseThrow(() -> new IllegalStateException(\"The target bean definition of scoped proxy bean not found. \" + \"Root bean definition[\" + holder + \"]\")); scopedProxy = true; } // 获取原类型 String beanClassName = definition.getBeanClassName(); LOGGER.debug(() -> \"Creating MapperFactoryBean with name '\" + holder.getBeanName() + \"' and '\" + beanClassName + \"' \" + \"mapperInterface\"); // 设置 MapperFactoryBean 构造器参数 mapperInterface，指定泛型 // the mapper interface is the original class of the bean // but, the actual class of the bean is MapperFactoryBean definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName); // issue #59 // 修改 beanClass 为 org.mybatis.spring.mapper.MapperFactoryBean definition.setBeanClass(this.mapperFactoryBeanClass); (1) // 是否要将接口添加到 Configuration 全局配置对象中，默认为 True definition.getPropertyValues().add(\"addToConfig\", this.addToConfig); // Attribute for MockitoPostProcessor // https://github.com/mybatis/spring-boot-starter/issues/475 definition.setAttribute(FACTORY_BEAN_OBJECT_TYPE, beanClassName); // 是否指定了 SqlSessionFactory boolean explicitFactoryUsed = false; // 添加 sqlSessionFactory // SqlSessionDaoSupport.setSqlSessionFactory() if (StringUtils.hasText(this.sqlSessionFactoryBeanName)) { definition.getPropertyValues() .add(\"sqlSessionFactory\", new RuntimeBeanReference(this.sqlSessionFactoryBeanName)); explicitFactoryUsed = true; } else if (this.sqlSessionFactory != null) { definition.getPropertyValues() .add(\"sqlSessionFactory\", this.sqlSessionFactory); explicitFactoryUsed = true; } // 添加 sqlSessionTemplate if (StringUtils.hasText(this.sqlSessionTemplateBeanName)) { // sqlSessionTemplate 覆盖 sqlSessionFactory if (explicitFactoryUsed) { LOGGER.warn(() -> \"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. \" + \"sqlSessionFactory is ignored.\"); } definition.getPropertyValues() .add(\"sqlSessionTemplate\", new RuntimeBeanReference(this.sqlSessionTemplateBeanName)); explicitFactoryUsed = true; } else if (this.sqlSessionTemplate != null) { if (explicitFactoryUsed) { LOGGER.warn(() -> \"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. \" + \"sqlSessionFactory is ignored.\"); } definition.getPropertyValues() .add(\"sqlSessionTemplate\", this.sqlSessionTemplate); explicitFactoryUsed = true; } // 上面没有找到对应的 SqlSessionFactory 或者 sqlSessionTemplate，则指定 mapper 通过类型注入 // 注入方式 by type （全局唯一） if (!explicitFactoryUsed) { LOGGER.debug(() -> \"Enabling autowire by type for MapperFactoryBean with name '\" + holder.getBeanName() + \"'.\"); definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE); } definition.setLazyInit(lazyInitialization); if (scopedProxy) { continue; } if (ConfigurableBeanFactory.SCOPE_SINGLETON.equals(definition.getScope()) && defaultScope != null) { definition.setScope(defaultScope); } // 非单例 if (!definition.isSingleton()) { BeanDefinitionHolder proxyHolder = ScopedProxyUtils.createScopedProxy(holder, registry, true); if (registry.containsBeanDefinition(proxyHolder.getBeanName())) { registry.removeBeanDefinition(proxyHolder.getBeanName()); } registry.registerBeanDefinition(proxyHolder.getBeanName(), proxyHolder.getBeanDefinition()); } } } 1 关键步骤，将 Mapper 接口注入到 Spring 容器中的类型修改 MapperFactoryBean MapperFactoryBean 实现了 FactoryBean 接口。 在注册 MapperFactoryBean 时，会把 getObject() 方法返回的对象注入到 Spring 容器中。 org.mybatis.spring.mapper.MapperFactoryBean#getObject public T getObject() throws Exception { // 从 org.apache.ibatis.session.Configuration#mapperRegistry#knownMappers 中返回 MapperProxy代理对象 return getSqlSession().getMapper(this.mapperInterface); } org.mybatis.spring.support.SqlSessionDaoSupport#getSqlSession public SqlSession getSqlSession() { return this.sqlSessionTemplate; (1) } 1 返回一个 SqlSession 类型的对象 SqlSessionTemplate org.springframework.cloud.openfeign.MapperFactoryBean#loadBalance public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) { // sqlSessionTemplate 覆盖 sqlSessionFactory if (this.sqlSessionTemplate == null || sqlSessionFactory != this.sqlSessionTemplate.getSqlSessionFactory()) { this.sqlSessionTemplate = createSqlSessionTemplate(sqlSessionFactory); (1) } } 1 使用 SqlSessionFactory 初始化 SqlSessionTemplate org.springframework.cloud.openfeign.MapperFactoryBean#get protected SqlSessionTemplate createSqlSessionTemplate( SqlSessionFactory sqlSessionFactory) { return new SqlSessionTemplate(sqlSessionFactory); } getMapper 方法中调用 Configuration#getMapper() 方法，最终得到返回的 MapperProxy 对象注入到 SpringContext 中。 org.mybatis.spring.SqlSessionTemplate#getMapper public T getMapper(Class type) { return getConfiguration().getMapper(type, this); } SqlSessionFactoryBean 实现了 FactoryBean 接口和 InitializingBean 接口。 SqlSessionFactoryBean 一般是手动注入，它内部持有了 Mybatis 的全局配置对象 Configuration 。 org.mybatis.spring.SqlSessionFactoryBean#afterPropertiesSet public void afterPropertiesSet() throws Exception { notNull(dataSource, \"Property 'dataSource' is required\"); notNull(sqlSessionFactoryBuilder, \"Property 'sqlSessionFactoryBuilder' is required\"); state((configuration == null && configLocation == null) || !(configuration != null && configLocation != null), \"Property 'configuration' and 'configLocation' can not specified with together\"); this.sqlSessionFactory = buildSqlSessionFactory(); (1) } 1 代替了 org.apache.ibatis.session.SqlSessionFactoryBuilder#build 方法。 org.mybatis.spring.SqlSessionFactoryBean#buildSqlSessionFactory protected SqlSessionFactory buildSqlSessionFactory() throws Exception { final Configuration targetConfiguration; XMLConfigBuilder xmlConfigBuilder = null; // 加载 org.apache.ibatis.session.Configuration // 1. 已存在 org.apache.ibatis.session.Configuration if (this.configuration != null) { targetConfiguration = this.configuration; if (targetConfiguration.getVariables() == null) { targetConfiguration.setVariables(this.configurationProperties); } else if (this.configurationProperties != null) { targetConfiguration.getVariables().putAll(this.configurationProperties); } } // 2. 配置了 mybatis-config.xml 配置文件 else if (this.configLocation != null) { xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, this.configurationProperties); targetConfiguration = xmlConfigBuilder.getConfiguration(); } // 3. 都未指定，创建一个 Configuration 对象 else { LOGGER.debug( () -> \"Property 'configuration' or 'configLocation' not specified, using default MyBatis \" + \"Configuration\"); targetConfiguration = new Configuration(); Optional.ofNullable(this.configurationProperties).ifPresent(targetConfiguration::setVariables); } // 注册 ObjectFactory Optional.ofNullable(this.objectFactory).ifPresent(targetConfiguration::setObjectFactory); // 注册 ObjectWrapperFactory Optional.ofNullable(this.objectWrapperFactory).ifPresent(targetConfiguration::setObjectWrapperFactory); // 注册 VFS Optional.ofNullable(this.vfs).ifPresent(targetConfiguration::setVfsImpl); // 类型别名 // 它只与XML配置相关，其存在只是为了减少完全限定类名的冗余键入 if (hasLength(this.typeAliasesPackage)) { scanClasses(this.typeAliasesPackage, this.typeAliasesSuperType).stream() // 过滤掉匿名类 .filter(clazz -> !clazz.isAnonymousClass()) // 过滤接口 .filter(clazz -> !clazz.isInterface()) // 过滤掉内部类 .filter(clazz -> !clazz.isMemberClass()) // 注册别名 .forEach(targetConfiguration.getTypeAliasRegistry()::registerAlias); } // 单个类型别名 if (!isEmpty(this.typeAliases)) { Stream.of(this.typeAliases).forEach(typeAlias -> { targetConfiguration.getTypeAliasRegistry().registerAlias(typeAlias); LOGGER.debug(() -> \"Registered type alias: '\" + typeAlias + \"'\"); }); } // 注册插件 if (!isEmpty(this.plugins)) { Stream.of(this.plugins).forEach(plugin -> { targetConfiguration.addInterceptor(plugin); LOGGER.debug(() -> \"Registered plugin: '\" + plugin + \"'\"); }); } // 类型转换器 // JDBCType 与 JAVAType 互转 if (hasLength(this.typeHandlersPackage)) { scanClasses(this.typeHandlersPackage, TypeHandler.class).stream().filter(clazz -> !clazz.isAnonymousClass()) // 过滤接口 .filter(clazz -> !clazz.isInterface()) // 过滤抽象类 .filter(clazz -> !Modifier.isAbstract(clazz.getModifiers())) // 注册类型转换器 .forEach(targetConfiguration.getTypeHandlerRegistry()::register); } // 单个类型转换器 if (!isEmpty(this.typeHandlers)) { Stream.of(this.typeHandlers).forEach(typeHandler -> { targetConfiguration.getTypeHandlerRegistry().register(typeHandler); LOGGER.debug(() -> \"Registered type handler: '\" + typeHandler + \"'\"); }); } // 枚举转换器 targetConfiguration.setDefaultEnumTypeHandler(defaultEnumTypeHandler); if (!isEmpty(this.scriptingLanguageDrivers)) { Stream.of(this.scriptingLanguageDrivers).forEach(languageDriver -> { targetConfiguration.getLanguageRegistry().register(languageDriver); LOGGER.debug(() -> \"Registered scripting language driver: '\" + languageDriver + \"'\"); }); } Optional.ofNullable(this.defaultScriptingLanguageDriver) .ifPresent(targetConfiguration::setDefaultScriptingLanguage); // 数据库id if (this.databaseIdProvider != null) { try { targetConfiguration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource)); } catch (SQLException e) { throw new NestedIOException(\"Failed getting a databaseId\", e); } } // 缓存 Optional.ofNullable(this.cache).ifPresent(targetConfiguration::addCache); // 如果不为空，解析 mybatis 配置 if (xmlConfigBuilder != null) { try { xmlConfigBuilder.parse(); LOGGER.debug(() -> \"Parsed configuration file: '\" + this.configLocation + \"'\"); } catch (Exception ex) { throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation, ex); } finally { ErrorContext.instance().reset(); } } // 设置 MyBatis Environment // MyBatis 支持多数据源，但每个 sqlSessionFactory 只能选择一个 // 多个数据源需要创建多个 SqlSessionFactory 实例 targetConfiguration.setEnvironment(new Environment( // id，默认为 SqlSessionFactoryBean this.environment, // 事务管理器 this.transactionFactory == null ? new SpringManagedTransactionFactory() : this.transactionFactory, // 数据源 this.dataSource)); // 注册 mapper.java 和 mapper.xml 文件 if (this.mapperLocations != null) { if (this.mapperLocations.length == 0) { LOGGER.warn(() -> \"Property 'mapperLocations' was specified but matching resources are not found.\"); } else { // 遍历全部 mapper 接口 for (Resource mapperLocation : this.mapperLocations) { if (mapperLocation == null) { continue; } try { XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(), targetConfiguration, mapperLocation.toString(), targetConfiguration.getSqlFragments()); // 解析 mapper.java 和 mapper.xml 文件 xmlMapperBuilder.parse(); } catch (Exception e) { throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e); } finally { ErrorContext.instance().reset(); } LOGGER.debug(() -> \"Parsed mapper file: '\" + mapperLocation + \"'\"); } } } else { LOGGER.debug(() -> \"Property 'mapperLocations' was not specified.\"); } return this.sqlSessionFactoryBuilder.build(targetConfiguration); (1) } 1 实际注入的是 DefaultSqlSessionFactory 。 org.apache.ibatis.session.SqlSessionFactoryBuilder#build public SqlSessionFactory build(Configuration config) { return new DefaultSqlSessionFactory(config); } Details public SqlSessionFactory getObject() throws Exception { // 如果为空，则初始化 if (this.sqlSessionFactory == null) { afterPropertiesSet(); } return this.sqlSessionFactory; }","title":"Spring 整合 MyBatis 原理","component":"mybatis","version":"","name":"mybatis-spring-integrations","url":"/mybatis/mybatis-spring/mybatis-spring-integrations.html","titles":[{"text":"时序图","hash":"时序图","id":1},{"text":"入口","hash":"入口","id":2},{"text":"Mapper 注入器","hash":"mapper-注入器","id":3},{"text":"注入 Mapper 接口","hash":"注入-mapper-接口","id":4},{"text":"修改加载的 BeanDefinition","hash":"修改加载的-beandefinition","id":5},{"text":"MapperFactoryBean","hash":"mapperfactorybean","id":6},{"text":"getSqlSession()","hash":"getsqlsession","id":7},{"text":"getMapper()","hash":"getmapper","id":8},{"text":"SqlSessionFactoryBean","hash":"sqlsessionfactorybean","id":9},{"text":"初始化","hash":"初始化","id":10},{"text":"注入 SqlSessionFactory","hash":"注入-sqlsessionfactory","id":11}]},"13":{"id":13,"text":"","title":"PageHelper","component":"mybatis","version":"","name":"page-helper","url":"/mybatis/mybatis-tk/page-helper.html","titles":[{"text":"PageHelper","hash":"pagehelper","id":1}]},"14":{"id":14,"text":"","title":"TkMyBatis","component":"mybatis","version":"","name":"tk","url":"/mybatis/mybatis-tk/tk.html","titles":[{"text":"TkMyBatis","hash":"tkmybatis","id":1}]}},"components":{},"componentVersions":{"mybatis/":{"displayVersion":"default","title":"Learn MyBatis","version":"","name":"mybatis","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlightjs-ext","site-title":"Implicated","site-url":"https://docs.implicated.com","experimental":"","page-pagination":"","idprefix":"","idseparator":"-","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{},{"VERSION":"0.4.0"}]},"url":"/mybatis/index.html","navigation":[{"items":[{"content":"基本介绍","url":"/mybatis/introduction.html","urlType":"internal"},{"content":"MyBatis","items":[{"content":"MyBatis 的组成","url":"/mybatis/mybatis/mybatis-component.html","urlType":"internal"},{"content":"MyBatis 初始化流程","url":"/mybatis/mybatis/mybatis-init.html","urlType":"internal"},{"content":"MyBatis 执行流程","url":"/mybatis/mybatis/mybatis-sql.html","urlType":"internal"},{"content":"MyBatis 插件","url":"/mybatis/mybatis/mybatis-plugin.html","urlType":"internal"}]},{"content":"MyBatis Spring","items":[{"content":"Spring 整合 MyBatis 原理","url":"/mybatis/mybatis-spring/mybatis-spring-integrations.html","urlType":"internal"}]}],"root":true,"order":0}]}}}})